{"version":3,"file":"status-collector.js","sourceRoot":"","sources":["status-collector.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EAAe,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAC,MAAM,eAAe;OACjE,EAAC,OAAO,EAAC,MAAM,mBAAmB;OAElC,EAAY,eAAe,EAAC,MAAM,SAAS;AAwElD;;;;GAIG;AACH,OAAO,IAAM,qBAAqB,GAAuC;IACrE,GAAG,EAAE;QACD,UAAU,EAAE;YACR,EAAE,EAAE,YAAY;YAChB,OAAO,EAAE,YAAY;SACxB;QACD,MAAM,EAAE;YACJ,EAAE,EAAE,QAAQ;YACZ,OAAO,EAAE,OAAO;SACnB;QACD,SAAS,EAAE;YACP,EAAE,EAAE,WAAW;YACf,OAAO,EAAE,WAAW;SACvB;KACJ;IACD,MAAM,EAAE;QACJ,UAAU,EAAE;YACR,EAAE,EAAE,SAAS;YACb,OAAO,EAAE,SAAS;SACrB;KACJ;IACD,MAAM,EAAE;QACJ,UAAU,EAAE;YACR,EAAE,EAAE,SAAS;YACb,OAAO,EAAE,SAAS;SACrB;QACD,OAAO,EAAE;YACL,EAAE,EAAE,MAAM;YACV,OAAO,EAAE,MAAM;SAClB;KACJ;IACD,MAAM,EAAE;QACJ,UAAU,EAAE;YACR,EAAE,EAAE,SAAS;YACb,OAAO,EAAE,SAAS;SACrB;KACJ;IACD,QAAQ,EAAE;QACN,UAAU,EAAE;YACR,EAAE,EAAE,UAAU;YACd,OAAO,EAAE,UAAU;SACtB;QACD,OAAO,EAAE;YACL,EAAE,EAAE,SAAS;YACb,OAAO,EAAE,SAAS;SACrB;KACJ;IACD,QAAQ,EAAE;QACN,UAAU,EAAE;YACR,EAAE,EAAE,UAAU;YACd,OAAO,EAAE,UAAU;SACtB;QACD,OAAO,EAAE;YACL,EAAE,EAAE,SAAS;YACb,OAAO,EAAE,SAAS;SACrB;KACJ;IACD,QAAQ,EAAE;QACN,UAAU,EAAE;YACR,EAAE,EAAE,UAAU;YACd,OAAO,EAAE,UAAU;SACtB;QACD,OAAO,EAAE;YACL,EAAE,EAAE,SAAS;YACb,OAAO,EAAE,SAAS;SACrB;KACJ;CACJ,CAAC;AAEF;;;;;;;;;;;;;GAaG;AAEH;IAOI,yBAAiD,YAAgC;QALzE,WAAM,GAAwC,EAAE,CAAC;QACjD,oBAAe,GAAuC,EAAE,CAAC;QAEzD,eAAU,GAAG,CAAC,CAAC;QAGnB,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACf,GAAG,CAAC,CAAa,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY,CAAC;gBAAzB,IAAI,IAAI,qBAAA;gBACT,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACrC;QACL,CAAC;IACL,CAAC;IAOD,sBAAI,mCAAM;QALV;;;;WAIG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,EAAE,CAAC;QAC7D,CAAC;;;OAAA;IAKD,sBAAI,uCAAU;QAHd;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,IAAI,KAAK,CAAC;QACtE,CAAC;;;OAAA;IAKD,sBAAI,mCAAM;QAHV;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,KAAK,CAAC;QAClE,CAAC;;;OAAA;IAKD,sBAAI,sCAAS;QAHb;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,IAAI,KAAK,CAAC;QACrE,CAAC;;;OAAA;IAKD,sBAAI,oCAAO;QAHX;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,IAAI,KAAK,CAAC;QACnE,CAAC;;;OAAA;IAED;;;;OAIG;IACH,qCAAW,GAAX,UAAY,MAA+B;QAA3C,iBAEC;QADG,MAAM,CAAC,SAAS,CAAC,UAAC,KAAgB,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,CAAC;IACnE,CAAC;IAED;;;;;;;;;;OAUG;IACH,8BAAI,GAAJ;QAAQ,gBAA8B;aAA9B,WAA8B,CAA9B,sBAA8B,CAA9B,IAA8B;YAA9B,+BAA8B;;QAClC,MAAM,CAAC,IAAI,CAAC,OAAO,OAAZ,IAAI,GAAS,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,SAAK,MAAM,EAAC,CAAC;IAC3D,CAAC;IAEO,iCAAO,GAAf,UAAmB,EAAU;QAAE,gBAA8B;aAA9B,WAA8B,CAA9B,sBAA8B,CAA9B,IAA8B;YAA9B,+BAA8B;;QAEzD,IAAM,IAAI,GAAG,MAAA,IAAI,cAAc,CAAI,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,UAAU,WAAI,MAAM,CAAC,CAAC;QAEhG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QAEvB,MAAM,CAAC,IAAI,CAAC;;IAChB,CAAC;IAEO,oCAAU,GAAlB,UAAmB,KAAgB;QAC/B,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEO,yCAAe,GAAvB,UAAwB,KAAgB;QACpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YAErB,IAAM,mBAAmB,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC;YAE1E,EAAE,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,OAAZ,IAAI,GAAS,SAAS,SAAK,mBAAmB,EAAC,CAAC;YACxE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;YACrE,CAAC;QACL,CAAC;IACL,CAAC;IAEO,8CAAoB,GAA5B,UAA6B,KAAgB;QAEzC,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;QAEvC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG;gBAC7B,KAAK,EAAE,KAAK;aACf,CAAA;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YAEJ,IAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAEpD,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,EAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAC,CAAC;YAChE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,YAAY,CAAC,GAAG,GAAG,KAAK,CAAC;YAC7B,CAAC;QACL,CAAC;IACL,CAAC;IAEO,oCAAU,GAAlB;QACI,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;YAC5B,CAAC;QACL,CAAC;IACL,CAAC;IAnIL;QAAC,UAAU,EAAE;mBAQI,MAAM,CAAC,eAAe,CAAC;mBAAE,QAAQ,EAAE;;uBARvC;IAqIb,sBAAC;AAAD,CAAC,AApID,IAoIC;AAgED;IAKI,wBACY,MAA2C,EAC3C,eAAmD,EACnD,GAAW;QAFX,WAAM,GAAN,MAAM,CAAqC;QAC3C,oBAAe,GAAf,eAAe,CAAoC;QACnD,QAAG,GAAH,GAAG,CAAQ;QANf,YAAO,GAAwB,EAAE,CAAC;IAO1C,CAAC;IAED,sBAAI,kCAAM;aAAV;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC;QACvD,CAAC;;;OAAA;IAED,sBAAI,sCAAU;aAAd;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,IAAI,KAAK,CAAC;QAC9D,CAAC;;;OAAA;IAED,sBAAI,kCAAM;aAAV;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,KAAK,CAAC;QAC1D,CAAC;;;OAAA;IAED,sBAAI,qCAAS;aAAb;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,KAAK,CAAC;QAC7D,CAAC;;;OAAA;IAED,sBAAI,mCAAO;aAAX;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,KAAK,CAAC;QAC3D,CAAC;;;OAAA;IAED,mCAAU,GAAV;QAAW,gBAA8B;aAA9B,WAA8B,CAA9B,sBAA8B,CAA9B,IAA8B;YAA9B,+BAA8B;;QACrC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,MAAA,IAAI,CAAC,OAAO,EAAC,OAAO,WAAI,MAAM,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC;;IAChB,CAAC;IAED,4CAAmB,GAAnB,UAAoB,SAAiB;QAAE,gBAA4B;aAA5B,WAA4B,CAA5B,sBAA4B,CAA5B,IAA4B;YAA5B,+BAA4B;;QAC/D,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,GAAG,CAAC,CAAU,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,CAAC;YAAhB,IAAI,CAAC,eAAA;YACN,IAAI,CAAC,UAAU,CAAC;gBACZ,GAAC,SAAS,CAAC,GAAE,CAAC;;aACjB,CAAC,CAAC;SACN;QACD,MAAM,CAAC,IAAI,CAAC;;IAChB,CAAC;IAED,8BAAK,GAAL;QACI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED,8BAAK,GAAL;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED,sBAAY,oCAAQ;aAApB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAC1B,CAAC;YAED,IAAI,QAAQ,GAAkC,SAAS,CAAC;YAExD,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBACxC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAEhD,IAAM,YAAY,GAAiB,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAE,CAAC;oBAEnE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBAChB,QAAQ,CAAC;oBACb,CAAC;oBAED,QAAQ,GAAG,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;gBACpE,CAAC;YACL,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QACrC,CAAC;;;OAAA;IAEO,iCAAQ,GAAhB,UAAiB,MAAoB;QACjC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACxG,CAAC;IAEO,uCAAc,GAAtB,UAAuB,SAAiB,EAAE,MAAoB;QAC1D,GAAG,CAAC,CAAU,UAAY,EAAZ,KAAA,IAAI,CAAC,OAAO,EAAZ,cAAY,EAAZ,IAAY,CAAC;YAAtB,IAAI,CAAC,SAAA;YAEN,IAAM,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAE5C,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;SACJ;QACD,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAEL,qBAAC;AAAD,CAAC,AA9FD,IA8FC;AAwBD,iBAAoB,MAAoB,EAAE,MAAwB;IAC9D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACV,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAED,IAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;IAEvB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACP,IAAM,UAAU,GAAG,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,CAAC,UAAU,IAAI,EAAC,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAC,CAAC;IAC/D,CAAC;IACD,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QACb,IAAM,SAAS,GAAG,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;QACtD,MAAM,CAAC,SAAS,IAAI,EAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;IAC5D,CAAC;IACD,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QACZ,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,IAAI,EAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC;IACnD,CAAC;IAED,IAAM,OAAO,GAAG,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAClD,MAAM,CAAC,OAAO,IAAI,EAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;AACtD,CAAC;AAED,mBAAsB,MAAoB,EAAE,KAAiD;IACzF,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACT,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IACD,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED,IAAM,OAAO,GAAG,KAA8C,CAAC;IAE/D,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACxC,CAAC;AAED,uBAA0B,QAA4B,EAAE,KAAsB;IAC1E,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACT,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED,IAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;IAExB,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACZ,MAAM,CAAC;YACH,MAAM,EAAE,CAAC,GAAG,CAAC;YACb,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,MAAM,EAAE,KAAK,CAAC,MAAM;YACpB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,OAAO,EAAE,KAAK,CAAC,OAAO;SACzB,CAAA;IACL,CAAC;IAED,QAAQ,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC;IAC9D,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC;IAClD,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC;IAC3D,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC;IAErD,GAAG,CAAC,CAAU,UAAe,EAAf,KAAA,QAAQ,CAAC,MAAM,EAAf,cAAe,EAAf,IAAe,CAAC;QAAzB,IAAI,CAAC,SAAA;QACN,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;KACJ;IAED,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE1B,MAAM,CAAC,QAAQ,CAAC;AACpB,CAAC","sourcesContent":["import {EventEmitter, Injectable, Optional, Inject} from \"@angular/core\";\nimport {isArray} from \"rxjs/util/isArray\";\nimport {RikeTarget} from \"./rike\";\nimport {RikeEvent, RikeEventSource} from \"./event\";\n\n/**\n * Rike operation status labels.\n *\n * Each field corresponds to particular status. The value of this field could be either label, or function returning\n * label, accepting Rike operations target as the only argument.\n *\n * When the label is absent the corresponding status won't be displayed.\n *\n * @param <L> a type of status labels.\n */\nexport interface StatusLabels<L> {\n\n    /**\n     * Processing label. It is applied when operation is initiated, but not completed yet.\n     */\n    processing?: L | ((target: RikeTarget<any, any>) => L);\n\n    /**\n     * Failure label. It is applied when operation failed due to error.\n     */\n    failed?: L | ((target: RikeTarget<any, any>) => L);\n\n    /**\n     * Cancellation label. It is applied when operation is cancelled.\n     */\n    cancelled?: L | ((target: RikeTarget<any, any>) => L);\n\n    /**\n     * Success label. It is applied when operation succeed.\n     */\n    succeed?: L | ((target: RikeTarget<any, any>) => L);\n\n}\n\n/**\n * A map of Rike operations status labels.\n *\n * Each key corresponds to particular operation name, and it value is status labels to apply to this operation.\n *\n * If labels for the given operation is not specified, or the is no label for the operation status, the label will be\n * searched under the `\"*\"` key.\n *\n * @param <L> a type of status labels.\n */\nexport interface StatusLabelMap<L> {\n    [operation: string]: StatusLabels<L>;\n}\n\n/**\n * Default status label.\n */\nexport type DefaultStatusLabel = string | {\n\n    /**\n     * Status identifier.\n     */\n    id?: string;\n\n    /**\n     * Status message.\n     */\n    message: string;\n\n    /**\n     * CSS class to indicate this status.\n     */\n    cssClass?: string;\n\n}\n\n/**\n * Default map of Rike operations status labels.\n *\n * Default status labels are strings.\n */\nexport const DEFAULT_STATUS_LABELS: StatusLabelMap<DefaultStatusLabel> = {\n    \"*\": {\n        processing: {\n            id: \"processing\",\n            message: \"Processing\"\n        },\n        failed: {\n            id: \"failed\",\n            message: \"Error\"\n        },\n        cancelled: {\n            id: \"cancelled\",\n            message: \"Cancelled\"\n        }\n    },\n    \"load\": {\n        processing: {\n            id: \"loading\",\n            message: \"Loading\",\n        },\n    },\n    \"send\": {\n        processing: {\n            id: \"sending\",\n            message: \"Sending\"\n        },\n        succeed: {\n            id: \"sent\",\n            message: \"Sent\"\n        },\n    },\n    \"read\": {\n        processing: {\n            id: \"loading\",\n            message: \"Loading\"\n        },\n    },\n    \"create\": {\n        processing: {\n            id: \"creating\",\n            message: \"Creating\"\n        },\n        succeed: {\n            id: \"created\",\n            message: \"Created\"\n        },\n    },\n    \"update\": {\n        processing: {\n            id: \"updating\",\n            message: \"Updating\"\n        },\n        succeed: {\n            id: \"updated\",\n            message: \"Updated\"\n        }\n    },\n    \"delete\": {\n        processing: {\n            id: \"deleting\",\n            message: \"Deleting\"\n        },\n        succeed: {\n            id: \"deleted\",\n            message: \"Deleted\"\n        },\n    },\n};\n\n/**\n * Rike operations status collecting service.\n *\n * It collects statuses of all available [Rike event sources][RikeEventSource].\n *\n * This service is registered automatically along with every event source by `provideEventSource()` method.\n * But unlike event sources it is not a multi-provider.\n *\n * An instance of this class could be created on its own. Then it is necessary to subscribe it on Rike events with\n * `subscribeOn` method.\n *\n * It is possible to read statuses and string labels from the service itself. Alternatively a view can be created\n * to read labels of arbitrary type.\n */\n@Injectable()\nexport class StatusCollector {\n\n    private _views: {[id: string]: StatusViewImpl<any>} = {};\n    private _targetStatuses: {[targetId: string]: TargetStatus} = {};\n    private _defaultView?: StatusViewImpl<DefaultStatusLabel>;\n    private _viewIdSeq = 0;\n\n    constructor(@Inject(RikeEventSource) @Optional() eventSources?: RikeEventSource[]) {\n        if (eventSources) {\n            for (let esrc of eventSources) {\n                this.subscribeOn(esrc.rikeEvents);\n            }\n        }\n    }\n\n    /**\n     * Current status labels.\n     *\n     * @return {DefaultStatusLabel[]} array of default labels.\n     */\n    get labels(): DefaultStatusLabel[] {\n        return this._defaultView ? this._defaultView.labels : [];\n    }\n\n    /**\n     * Whether some operation is in process.\n     */\n    get processing(): boolean {\n        return this._defaultView && this._defaultView.processing || false;\n    }\n\n    /**\n     * Whether some operation failed.\n     */\n    get failed(): boolean {\n        return this._defaultView && this._defaultView.failed || false;\n    }\n\n    /**\n     * Whether some operation cancelled.\n     */\n    get cancelled(): boolean {\n        return this._defaultView && this._defaultView.cancelled || false;\n    }\n\n    /**\n     * Whether some operation succeed.\n     */\n    get succeed(): boolean {\n        return this._defaultView && this._defaultView.succeed || false;\n    }\n\n    /**\n     * Subscribes this collector on the given Rike events emitter.\n     *\n     * @param events Rike events emitter to subscribe on.\n     */\n    subscribeOn(events: EventEmitter<RikeEvent>) {\n        events.subscribe((event: RikeEvent) => this.applyEvent(event));\n    }\n\n    /**\n     * Constructs a Rike operations status view.\n     *\n     * When the view is no longer needed a {{StatusView.close}} method should be called to release resources\n     * associated with it.\n     *\n     * @param <L> a type of status labels.\n     * @param labels a map(s) of Rike operations status labels to use by this view.\n     *\n     * @return {StatusView<L>} new status view.\n     */\n    view<L>(...labels: StatusLabelMap<L>[]): StatusView<L> {\n        return this.addView(\"\" + ++this._viewIdSeq, ...labels);\n    }\n\n    private addView<L>(id: string, ...labels: StatusLabelMap<L>[]): StatusViewImpl<L> {\n\n        const view = new StatusViewImpl<L>(this._views, this._targetStatuses, id).withLabels(...labels);\n\n        this._views[id] = view;\n\n        return view;\n    }\n\n    private applyEvent(event: RikeEvent) {\n        this.initDefaultView(event);\n        this.updateTargetStatuses(event);\n        this.resetViews();\n    }\n\n    private initDefaultView(event: RikeEvent) {\n        if (!this._defaultView) {\n\n            const defaultStatusLabels = event.target.rike.options.defaultStatusLabels;\n\n            if (isArray(defaultStatusLabels)) {\n                this._defaultView = this.addView(\"default\", ...defaultStatusLabels);\n            } else {\n                this._defaultView = this.addView(\"default\", defaultStatusLabels);\n            }\n        }\n    }\n\n    private updateTargetStatuses(event: RikeEvent) {\n\n        const uniqueId = event.target.uniqueId;\n\n        if (!event.complete) {\n            this._targetStatuses[uniqueId] = {\n                start: event,\n            }\n        } else {\n\n            const targetStatus = this._targetStatuses[uniqueId];\n\n            if (!targetStatus) {\n                this._targetStatuses[uniqueId] = {start: event, end: event};\n            } else {\n                targetStatus.end = event;\n            }\n        }\n    }\n\n    private resetViews() {\n        for (let id in this._views) {\n            if (this._views.hasOwnProperty(id)) {\n                this._views[id].reset();\n            }\n        }\n    }\n\n}\n\n/**\n * Rike operations status view.\n *\n * It could be created by {{StatusCollector.view}} and will be updated with new statuses until the `close()`\n * method call.\n *\n * @param <L> a type of status labels.\n */\nexport interface StatusView<L> {\n\n    /**\n     * Current status labels.\n     *\n     * @return {L[]} array of status labels.\n     */\n    readonly labels: L[];\n\n    /**\n     * Whether some operation is in process.\n     */\n    readonly processing: boolean;\n\n    /**\n     * Whether some operation failed.\n     */\n    readonly failed: boolean;\n\n    /**\n     * Whether some operation cancelled.\n     */\n    readonly cancelled: boolean\n\n    /**\n     * Whether some operation succeed.\n     */\n    readonly succeed: boolean;\n\n    /**\n     * Registers new operation status labels.\n     *\n     * @param labels a map of operation status labels.\n     */\n    withLabels(labels: StatusLabelMap<L>): this;\n\n    /**\n     * Registers new status labels for the given operation.\n     *\n     * @param operation target operation name.\n     * @param labels operation status labels.\n     */\n    withOperationLabels(operation: string, labels: StatusLabels<L>): this;\n\n    /**\n     * Closes the view.\n     *\n     * This method should be called when the view is no longer needed. After it is called the view won't be updated\n     * any more.\n     */\n    close(): void;\n\n}\n\nclass StatusViewImpl<L> implements StatusView<L> {\n\n    private _labels: StatusLabelMap<L>[] = [];\n    private _combined?: CombinedStatus<L>;\n\n    constructor(\n        private _views: {[id: string]: StatusViewImpl<any>},\n        private _targetStatuses: {[targetId: string]: TargetStatus},\n        private _id: string) {\n    }\n\n    get labels(): L[] {\n        return this.combined && this.combined.labels || [];\n    }\n\n    get processing(): boolean {\n        return this.combined && this.combined.processing || false;\n    }\n\n    get failed(): boolean {\n        return this.combined && this.combined.failed || false;\n    }\n\n    get cancelled(): boolean {\n        return this.combined && this.combined.cancelled || false;\n    }\n\n    get succeed(): boolean {\n        return this.combined && this.combined.succeed || false;\n    }\n\n    withLabels(...labels: StatusLabelMap<L>[]): this {\n        this._combined = undefined;\n        this._labels.unshift(...labels);\n        return this;\n    }\n\n    withOperationLabels(operation: string, ...labels: StatusLabels<L>[]): this {\n        this._combined = undefined;\n        for (let l of labels) {\n            this.withLabels({\n                [operation]: l\n            });\n        }\n        return this;\n    }\n\n    reset() {\n        this._combined = undefined;\n    }\n\n    close() {\n        delete this._views[this._id];\n    }\n\n    private get combined(): CombinedStatus<L> | undefined {\n        if (this._combined) {\n            return this._combined;\n        }\n\n        let combined: CombinedStatus<L> | undefined = undefined;\n\n        for (let targetId in this._targetStatuses) {\n            if (this._targetStatuses.hasOwnProperty(targetId)) {\n\n                const targetStatus: TargetStatus = this._targetStatuses[targetId]!;\n\n                if (!targetStatus) {\n                    continue;\n                }\n\n                combined = combineLabels(combined, this.labelFor(targetStatus));\n            }\n        }\n\n        return this._combined = combined;\n    }\n\n    private labelFor(status: TargetStatus): StatusLabel<L> | undefined {\n        return this.operationLabel(status.start.operation.name, status) || this.operationLabel(\"*\", status);\n    }\n\n    private operationLabel(operation: string, status: TargetStatus): StatusLabel<L> | undefined {\n        for (let l of this._labels) {\n\n            const label = labelOf(status, l[operation]);\n\n            if (label) {\n                return label;\n            }\n        }\n        return undefined;\n    }\n\n}\n\ninterface TargetStatus {\n    start: RikeEvent;\n    end?: RikeEvent;\n}\n\ninterface StatusLabel<L> {\n    label: L;\n    processing?: boolean;\n    failed?: boolean;\n    cancelled?: boolean;\n    succeed?: boolean;\n}\n\ninterface CombinedStatus<L> {\n    targets?: RikeTarget<any, any>;\n    labels: L[];\n    processing?: boolean;\n    failed?: boolean;\n    cancelled?: boolean;\n    succeed?: boolean;\n}\n\nfunction labelOf<L>(status: TargetStatus, labels?: StatusLabels<L>): StatusLabel<L> | undefined {\n    if (!labels) {\n        return undefined;\n    }\n\n    const end = status.end;\n\n    if (!end) {\n        const processing = evalLabel(status, labels.processing);\n        return processing && {label: processing, processing: true};\n    }\n    if (end.cancel) {\n        const cancelled = evalLabel(status, labels.cancelled);\n        return cancelled && {label: cancelled, cancelled: true};\n    }\n    if (end.error) {\n        const failed = evalLabel(status, labels.failed);\n        return failed && {label: failed, failed: true};\n    }\n\n    const succeed = evalLabel(status, labels.succeed);\n    return succeed && {label: succeed, succeed: true};\n}\n\nfunction evalLabel<L>(status: TargetStatus, label?: L | ((target: RikeTarget<any, any>) => L)): L | undefined {\n    if (!label) {\n        return undefined;\n    }\n    if (typeof label !== \"function\") {\n        return label;\n    }\n\n    const labelFn = label as ((target: RikeTarget<any, any>) => L);\n\n    return labelFn(status.start.target);\n}\n\nfunction combineLabels<L>(combined?: CombinedStatus<L>, label?: StatusLabel<L>): CombinedStatus<L> | undefined {\n    if (!label) {\n        return combined;\n    }\n\n    const lbl = label.label;\n\n    if (!combined) {\n        return {\n            labels: [lbl],\n            processing: label.processing,\n            failed: label.failed,\n            cancelled: label.cancelled,\n            succeed: label.succeed,\n        }\n    }\n\n    combined.processing = combined.processing || label.processing;\n    combined.failed = combined.failed || label.failed;\n    combined.cancelled = combined.cancelled || label.cancelled;\n    combined.succeed = combined.succeed || label.succeed;\n\n    for (let l of combined.labels) {\n        if (l === lbl) {\n            return combined;\n        }\n    }\n\n    combined.labels.push(lbl);\n\n    return combined;\n}\n"]}