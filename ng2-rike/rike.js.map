{"version":3,"sources":["rike.ts"],"names":[],"mappings":"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","file":"rike.js","sourceRoot":"","sourcesContent":["import {Injectable, Optional, EventEmitter} from \"@angular/core\";\nimport {\n    Request,\n    RequestOptionsArgs,\n    Response,\n    Http,\n    RequestMethod,\n    RequestOptions,\n    ResponseOptions,\n    ResponseType\n} from \"@angular/http\";\nimport {Observable, Observer, Subscription} from \"rxjs/Rx\";\nimport {\n    RikeEvent,\n    RikeSuccessEvent,\n    RikeOperationEvent,\n    RikeCancelEvent,\n    RikeEventSource,\n    RikeErrorResponseEvent\n} from \"./event\";\nimport {RikeOptions, DEFAULT_RIKE_OPTIONS, relativeUrl} from \"./options\";\nimport {Protocol, HTTP_PROTOCOL, jsonProtocol, ErrorResponse} from \"./protocol\";\nimport {RikeExceptionEvent} from \"./event\";\n\nconst REQUEST_METHODS: {[name: string]: number} = {\n    \"GET\": RequestMethod.Get,\n    \"POST\": RequestMethod.Post,\n    \"PUT\": RequestMethod.Put,\n    \"DELETE\": RequestMethod.Delete,\n    \"OPTIONS\": RequestMethod.Options,\n    \"HEAD\": RequestMethod.Head,\n    \"PATCH\": RequestMethod.Patch,\n};\n\nexport function requestMethod(method: string | RequestMethod): RequestMethod {\n    if (typeof method !== \"string\") {\n        return method;\n    }\n\n    const result = REQUEST_METHODS[method.toUpperCase()];\n\n    if (result != null) {\n        return result;\n    }\n\n    throw new Error(\"Unsupported HTTP request method: \" + method);\n}\n\n/**\n * REST-like resource operations service.\n *\n * This service can be injected to other services or components.\n *\n * It basically mimics the `Http` interface, but also honors [global Rike options][RikeOptions].\n *\n * It can also be used to perform operations on particular targets.\n */\n\nexport class Rike implements RikeEventSource {\n\n    private readonly _options: RikeOptions;\n    private readonly _rikeEvents = new EventEmitter<RikeEvent>();\n    private readonly _internals: RikeInternals;\n    private _uniqueIdSeq = 0;\n\n    constructor(private _http: Http, defaultHttpOptions: RequestOptions,  _options?: RikeOptions) {\n        this._options = _options || DEFAULT_RIKE_OPTIONS;\n        this._internals = {\n            defaultHttpOptions,\n            generateUniqueId: () => {\n                return \"\" + ++this._uniqueIdSeq;\n            },\n            request: (request: string | Request, options?: RequestOptionsArgs) => {\n                options = this.updateRequestOptions(options);\n                if (typeof request === \"string\") {\n                    request = this.options.relativeUrl(request);\n                }\n                return this._http.request(request, options);\n            },\n            get: (url: string, options?: RequestOptionsArgs) =>\n                this._http.get(\n                    this.options.relativeUrl(url),\n                    this.updateRequestOptions(options)),\n            post: (url: string, body: any, options?: RequestOptionsArgs) =>\n                this._http.post(\n                    this.options.relativeUrl(url),\n                    body,\n                    this.updateRequestOptions(options)),\n            put: (url: string, body: any, options?: RequestOptionsArgs) =>\n                this._http.put(\n                    this.options.relativeUrl(url),\n                    body,\n                    this.updateRequestOptions(options)),\n            \"delete\": (url: string, options?: RequestOptionsArgs) =>\n                this._http.delete(\n                    this.options.relativeUrl(url),\n                    this.updateRequestOptions(options)),\n            patch: (url: string, body: any, options?: RequestOptionsArgs) =>\n                this._http.patch(\n                    this.options.relativeUrl(url),\n                    body,\n                    this.updateRequestOptions(options)),\n            head: (url: string, options?: RequestOptionsArgs) =>\n                this._http.head(\n                    this.options.relativeUrl(url),\n                    this.updateRequestOptions(options)),\n        }\n    }\n\n    /**\n     * Global REST-like resource access options.\n     *\n     * @returns {RikeOptions} either pre-configured, or [default][DEFAULT_RIKE_OPTIONS] options.\n     */\n    get options(): RikeOptions {\n        return this._options;\n    }\n\n    /**\n     * Default Rike protocol.\n     *\n     * @return {Protocol<any, any>} either {{RikeOptions.defaultProtocol}}, or `HTTP_PROTOCOL`.\n     */\n    get defaultProtocol(): Protocol<any, any> {\n        return this.options.defaultProtocol || HTTP_PROTOCOL;\n    }\n\n    /**\n     * All REST-like resource operation events emitter.\n     *\n     * @returns {EventEmitter<RikeEvent>}\n     */\n    get rikeEvents(): EventEmitter<RikeEvent> {\n        return this._rikeEvents;\n    }\n\n    request(request: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.request(request, this.prepareRequest(options)));\n    }\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.get(url, this.prepareRequest(options)));\n    }\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.post(url, body, this.prepareRequest(options)));\n    }\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.put(url, body, this.prepareRequest(options)));\n    }\n\n    //noinspection ReservedWordAsName\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.delete(url, this.prepareRequest(options)));\n    }\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.patch(url, body, this.prepareRequest(options)));\n    }\n\n    head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n        return this.handleErrors(this._internals.head(url, this.prepareRequest(options)));\n    }\n\n    /**\n     * Constructs operation target which operates over `HTTP_PROTOCOL`.\n     *\n     * Arbitrary value can be used as a request body.\n     *\n     * @param target arbitrary target value.\n     *\n     * @returns {RikeTarget} new operation target.\n     */\n    target(target: any): RikeTarget<any, Response>;\n\n    /**\n     * Constructs operations target which operates over the given protocol.\n     *\n     * @param target arbitrary target value.\n     * @param protocol operations protocol.\n     *\n     * @return {RikeTarget<I, O>} new operations target.\n     */\n    target<I, O>(target: any, protocol: Protocol<I, O>): RikeTarget<I, O>;\n\n    target(target: any, protocol?: Protocol<any, any>): RikeTarget<any, any> {\n\n        const rikeTarget = new RikeTargetImpl<any, any>(\n            this,\n            this._internals,\n            target,\n            protocol ? protocol.prior().apply(this.defaultProtocol) : this.defaultProtocol);\n\n        rikeTarget.rikeEvents.subscribe(\n            (event: RikeEvent) => this._rikeEvents.emit(event),\n            (error: any) => this._rikeEvents.error(error),\n            () => this._rikeEvents.complete());\n\n        return rikeTarget;\n    }\n\n    /**\n     * Constructs operations target which operates over [JSON protocol][jsonProtocol].\n     *\n     * @param target arbitrary target value.\n     *\n     * @return {RikeTarget<I, O>} new operations target.\n     */\n    json<I, O>(target: any): RikeTarget<I, O> {\n        return this.target(target, jsonProtocol<I, O>());\n    }\n\n    /**\n     * Updates HTTP request options accordingly to global _options_.\n     *\n     * @param options HTTP request options to update.\n     *\n     * @returns {RequestOptionsArgs} either new HTTP options instance, or the _options_ argument if no modifications\n     * done.\n     */\n    protected updateRequestOptions(options?: RequestOptionsArgs): RequestOptionsArgs | undefined {\n        if (!options) {\n            return options;\n        }\n        if (options.url != null) {\n\n            var newUrl = this._options.relativeUrl(options.url);\n\n            if (newUrl !== options.url) {\n                options = {\n                    url: newUrl,\n                    method: options.method,\n                    search: options.search,\n                    headers: options.headers,\n                    body: options.body,\n                    withCredentials: options.withCredentials,\n                }\n            }\n        }\n\n        return options;\n    }\n\n    private prepareRequest(options?: RequestOptionsArgs) {\n        return this.defaultProtocol.prepareRequest(options || {});\n    }\n\n    /**\n     * Wraps the HTTP response observable for the given operation to make it handle errors.\n     *\n     * @param response response observer to wrap.\n     *\n     * @returns {Observable<Response>} response observer wrapper.\n     */\n    private handleErrors(response: Observable<Response>): Observable<Response> {\n        return new Observable<Response>((responseObserver: Observer<Response>) => {\n            response.subscribe(\n                httpResponse => responseObserver.next(httpResponse),\n                error => responseObserver.error(this.defaultProtocol.handleError(toErrorResponse(error))),\n                () => responseObserver.complete());\n        });\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: RequestOptions, },\n{type: RikeOptions, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction toErrorResponse(error: any): ErrorResponse {\n    if (error instanceof Response) {\n        return {\n            response: error,\n            error: error.status,\n        };\n    }\n    return syntheticResponse(error);\n}\n\nfunction syntheticResponse(error: any): ErrorResponse {\n\n    const statusText = error != null ? error.toString() : null;\n\n    return {\n        response: new Response(new ResponseOptions({\n            type: ResponseType.Error,\n            status: 500,\n            statusText: statusText || \"Unknown error\"\n        })),\n        error,\n    };\n}\n\n/**\n * REST-like operations target.\n *\n * Operation targets are created using [Rike.target] method. The actual operations should be created first with\n * `operation` method.\n *\n * Only one operation can be performed on a target at a time. Whenever a new operation on the same target is initiated,\n * the previous one is cancelled.\n *\n * `IN` is a request type this target's operations accept by default.\n * `OUT` is a response type this target's operations return by default.\n */\nexport abstract class RikeTarget<IN, OUT> implements RikeEventSource {\n\n    /**\n     * `Rike` service instance.\n     */\n    abstract readonly rike: Rike;\n\n    /**\n     * Operation target value.\n     *\n     * This is the value passed to the [Rike.target] method.\n     */\n    abstract readonly target: any;\n\n    /**\n     * Unique target identifier.\n     */\n    abstract readonly uniqueId: string;\n\n    /**\n     * A currently evaluating operation.\n     *\n     * `undefined` if no operations currently in process, i.e. operation not started, cancelled, or completed, either\n     * successfully or with error.\n     */\n    abstract readonly currentOperation?: RikeOperation<any, any>;\n\n    /**\n     * An emitter of events for operations performed on this target.\n     */\n    abstract readonly rikeEvents: EventEmitter<RikeEvent>;\n\n    /**\n     * An operations protocol to use by default.\n     *\n     * This is a protocol based on the one passed to [Rike.target] method, which honors {{Rike.defaultProtocol}}.\n     */\n    abstract readonly protocol: Protocol<IN, OUT>;\n\n    /**\n     * Base URL to use by operations.\n     */\n    abstract readonly baseUrl?: string;\n\n    /**\n     * Assigns base URL to use by operations.\n     *\n     * This URL can be absolute, or relative to the one specified in the [global options][RikeOptions.baseUrl].\n     *\n     * @param url new base URL or `undefined` to reset it.\n     */\n    abstract withBaseUrl(url?: string): this;\n\n    /**\n     * Constructs an operation on this target which operates over the target's `protocol`.\n     *\n     * @param name operation name.\n     *\n     * @return {RikeOperation<IN, OUT>} new operation.\n     */\n    abstract operation(name: string): RikeOperation<IN, OUT>;\n\n    /**\n     * Constructs an operation on this target which operates over the given protocol.\n     *\n     * @param name operation name.\n     * @param protocol operation protocol.\n     *\n     * @return {RikeOperation<I, O>} new operation.\n     */\n    abstract operation<I, O>(name: string, protocol: Protocol<I, O>): RikeOperation<I, O>;\n\n    /**\n     * Constructs JSON operation on this target.\n     *\n     * It operates over [JSON protocol][jsonProtocol].\n     *\n     * @param name operation name.\n     *\n     * @return {RikeOperation<T, T>} new operation.\n     */\n    json<I, O>(name: string): RikeOperation<I, O> {\n        return this.operation(name, jsonProtocol<I, O>());\n    }\n\n    /**\n     * Cancels current operation, if any.\n     *\n     * @return `true` if operation cancelled, or `false` if there is no operation to cancel.\n     */\n    abstract cancel(): boolean;\n\n}\n\n//noinspection ReservedWordAsName\n/**\n * REST-like resource operation.\n *\n * It operates over the given protocol and emits events.\n *\n * To initiate operation just call any of the HTTP access methods. Note that operation always belongs to its target\n * and thus two operations could not be initiated simultaneously.\n *\n * `IN` is a type of requests this operation accepts.\n * `OUT` is a type of responses this operation produces.\n */\nexport abstract class RikeOperation<IN, OUT> {\n\n    /**\n     * Operation target.\n     */\n    abstract readonly target: RikeTarget<any, any>;\n\n    /**\n     * Operation name.\n     */\n    abstract readonly name: string;\n\n    /**\n     * Operation protocol.\n     *\n     * This protocol is based on the one passed to the [RikeTarget.operation], but also honors the default protocol\n     * set for target.\n     */\n    abstract readonly protocol: Protocol<IN, OUT>;\n\n    abstract readonly options: RequestOptions;\n\n    abstract withOptions(options?: RequestOptionsArgs): this;\n\n    get url(): string | undefined {\n        return this.options.url || undefined;\n    }\n\n    withUrl(url: string): this {\n        return this.withOptions({url});\n    }\n\n    get method(): RequestMethod | undefined {\n\n        const method = this.options.method;\n\n        return method == null ? undefined : requestMethod(method);\n    }\n\n    withMethod(method: string | RequestMethod): this {\n        return this.withOptions({method});\n    }\n\n    abstract load(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract send(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract get(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract post(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract put(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    //noinspection ReservedWordAsName\n    abstract delete(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract patch(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n    abstract head(url?: string, options?: RequestOptionsArgs): Observable<OUT>;\n\n}\n\n//noinspection ReservedWordAsName\ninterface RikeInternals {\n\n    readonly defaultHttpOptions: RequestOptions;\n\n    generateUniqueId(): string;\n\n    request(request: string | Request, options?: RequestOptionsArgs): Observable<Response>;\n\n    get(url: string, options?: RequestOptionsArgs): Observable<Response>;\n\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response>;\n\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n\n    head(url: string, options?: RequestOptionsArgs): Observable<Response>;\n\n}\n\nclass RikeTargetImpl<IN, OUT> extends RikeTarget<IN, OUT> {\n\n    private _uniqueId: string;\n    private _rikeEvents = new EventEmitter<RikeEvent>();\n    private _baseUrl?: string;\n    private _operation?: RikeOperationEvent;\n    private _response?: Observable<Response>;\n    private _observer?: Observer<any>;\n    private _subscr?: Subscription;\n\n    constructor(\n        private _rike: Rike,\n        private _internals: RikeInternals,\n        private _target: any,\n        private _protocol: Protocol<IN, OUT>) {\n        super();\n        this._uniqueId = _internals.generateUniqueId();\n    }\n\n    get rike(): Rike {\n        return this._rike;\n    }\n\n    get target(): any {\n        return this._target;\n    }\n\n    get uniqueId(): string {\n        return this._uniqueId;\n    }\n\n    get currentOperation(): RikeOperation<any, any> | undefined {\n        return this._operation && this._operation.operation;\n    }\n\n    get rikeEvents(): EventEmitter<RikeEvent> {\n        return this._rikeEvents;\n    }\n\n    get internals(): RikeInternals {\n        return this._internals;\n    }\n\n    get protocol(): Protocol<IN, OUT> {\n        return this._protocol;\n    }\n\n    get baseUrl(): string | undefined {\n        return this._baseUrl;\n    }\n\n    withBaseUrl(url?: string): this {\n        this._baseUrl = url;\n        return this;\n    }\n\n    cancel(): boolean {\n        return this._cancel();\n    }\n\n    private _cancel(cause?: RikeOperationEvent): boolean {\n        if (!this._operation) {\n            return false;\n        }\n\n        this._response = undefined;\n        try {\n            if (this._observer) {\n                try {\n\n                    const cancel = new RikeCancelEvent(this._operation.operation, cause);\n\n                    this._observer.error(cancel);\n                    this._rikeEvents.emit(cancel);\n                } finally {\n                    this._operation = undefined;\n                    try {\n                        this._observer.complete();\n                    } finally {\n                        this._observer = undefined;\n                    }\n                }\n            }\n        } finally {\n            if (this._subscr) {\n                this._subscr.unsubscribe();\n                this._subscr = undefined;\n            }\n        }\n\n        return true;\n    }\n\n    operation(name: string, protocol?: Protocol<any, any>): RikeOperation<any, any> {\n        return new RikeOperationImpl(\n            this,\n            name,\n            !protocol ? this.protocol : protocol.prior().apply(this.protocol));\n    }\n\n    startOperation(operation: RikeOperation<any, any>): void {\n\n        const event = new RikeOperationEvent(operation);\n\n        this._cancel(event);\n        this._rikeEvents.emit(event);\n        this._operation = event;\n    }\n\n    wrapResponse<IN, OUT>(operation: RikeOperation<IN, OUT>, response: Observable<Response>): Observable<OUT> {\n        this._response = response;\n        return new Observable<OUT>((responseObserver: Observer<OUT>) => {\n            if (this._response !== response) {\n                return;// Another request already initiated\n            }\n            this._observer = responseObserver;\n\n            const cleanup = () => {\n                this._response = undefined;\n                this._operation = undefined;\n                if (this._subscr) {\n                    this._subscr.unsubscribe();\n                    this._subscr = undefined;\n                }\n            };\n\n            this._subscr = response.subscribe(\n                httpResponse => {\n\n                    const response = operation.protocol.readResponse(httpResponse);\n\n                    responseObserver.next(response);\n                    this._rikeEvents.emit(new RikeSuccessEvent(operation, response));\n                },\n                error => {\n\n                    let errorResponse = toErrorResponse(error);\n\n                    try {\n                        errorResponse = operation.protocol.handleError(errorResponse);\n                        responseObserver.error(errorResponse);\n                        this._rikeEvents.emit(new RikeErrorResponseEvent(operation, errorResponse));\n                    } finally {\n                        cleanup();\n                    }\n                },\n                () => {\n                    try {\n                        responseObserver.complete();\n                    } finally {\n                        cleanup();\n                    }\n                });\n        });\n    }\n\n    toString(): string {\n        return \"RikeTarget[\" + this.target + \"]\";\n    }\n\n}\n\nclass RikeOperationImpl<IN, OUT> extends RikeOperation<IN, OUT> {\n\n    private _options: RequestOptions;\n\n    constructor(\n        private _target: RikeTargetImpl<any, any>,\n        private _name: string,\n        private _protocol: Protocol<IN, OUT>) {\n        super();\n        this._options = _target.internals.defaultHttpOptions.merge();\n    }\n\n    get rike(): Rike {\n        return this.target.rike;\n    }\n\n    get internals(): RikeInternals {\n        return this.target.internals;\n    }\n\n    get target(): RikeTargetImpl<any, any> {\n        return this._target;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get protocol(): Protocol<IN, OUT> {\n        return this._protocol;\n    }\n\n    withOptions(options?: RequestOptionsArgs): this {\n        if (options) {\n            this._options = this._options.merge(options);\n        }\n        return this;\n    }\n\n    get options(): RequestOptions {\n        return this._options;\n    }\n\n    load(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(undefined, url, options);\n            return this.wrapResponse(this.internals.request(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.emit(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    send(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(undefined, url, options));\n            return this.wrapResponse(this.internals.request(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.emit(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    get(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Get, url, options);\n            return this.wrapResponse(this.internals.get(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.emit(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    post(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Post, url, options));\n            return this.wrapResponse(this.internals.post(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.emit(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    put(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Put, url, options));\n            return this.wrapResponse(this.internals.put(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.emit(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    //noinspection ReservedWordAsName\n    delete(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Delete, url, options);\n            return this.wrapResponse(this.internals.delete(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.emit(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    patch(request: IN, url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.writeRequest(request, this.requestOptions(RequestMethod.Patch, url, options));\n            return this.wrapResponse(this.internals.patch(this.requestUrl(options), options.body, options));\n        } catch (e) {\n            this.target.rikeEvents.emit(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    head(url?: string, options?: RequestOptionsArgs): Observable<OUT> {\n        try {\n            this.startOperation();\n            options = this.requestOptions(RequestMethod.Head, url, options);\n            return this.wrapResponse(this.internals.head(this.requestUrl(options), options));\n        } catch (e) {\n            this.target.rikeEvents.emit(new RikeExceptionEvent(this, e));\n            throw e;\n        }\n    }\n\n    toString() {\n        return \"RikeOperation[\" + this.name + \"@\" + this.target + \"]\";\n    }\n\n    private startOperation() {\n        this.target.startOperation(this);\n    }\n\n    private requestOptions(method?: RequestMethod, url?: string, options?: RequestOptionsArgs): RequestOptionsArgs {\n        if (!options) {\n            options = {url, method};\n        } else {\n            options = new RequestOptions(options).merge({url, method});\n        }\n\n        options = this.options.merge(options);\n        if (options.url == null) {\n            options.url = this.target.baseUrl;\n        } else {\n            options.url = relativeUrl(this.target.baseUrl, options.url);\n        }\n\n        return this.protocol.prepareRequest(options);\n    }\n\n    private writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        options = this.protocol.writeRequest(request, options);\n        return options;\n    }\n\n    //noinspection JSMethodCanBeStatic\n    private requestUrl(options: RequestOptionsArgs): string {\n        if (options.url != null) {\n            return options.url;\n        }\n        throw new Error(\"Request URL not specified\");\n    }\n\n    private wrapResponse(response: Observable<Response>): Observable<OUT> {\n        return this.target.wrapResponse(this, response);\n    }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}