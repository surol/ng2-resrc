{"version":3,"sources":["options.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAC,OAAO,EAAC,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAW,aAAa,EAAC,MAAM,YAAY,CAAC;AACnD,OAAO,EAAC,qBAAqB,EAAqC,MAAM,oBAAoB,CAAC;AAE7F;;;;;;;;GAQG;AACH,MAAM,sBAAsB,OAA2B,EAAE,GAAW;IAChE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACX,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IACD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACjB,MAAM,CAAC,GAAG,CAAC,CAAA,eAAe;IAC9B,CAAC;IACD,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,GAAG,CAAC,CAAA,WAAW;IAC1B,CAAC;IACD,MAAM,CAAC,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC;AAC/B,CAAC;AAgCD;;;;;;;GAOG;AACH;IAAA;IAmBA,CAAC;IAXG;;;;;;OAMG;IACH,iCAAW,GAAX,UAAY,GAAW;QACnB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAC1C,CAAC;IAEL,kBAAC;AAAD,CAnBA,AAmBC,IAAA;;AAED;;;;GAIG;AACH;IAAqC,mCAAW;IAM5C,yBAAY,IAAsB;QAAlC,YACI,iBAAO,SAmBV;QAvBO,sBAAgB,GAAuB,aAAa,CAAC;QACrD,0BAAoB,GAAyC,CAAC,qBAAqB,CAAC,CAAC;QAIzF,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACP,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBACvB,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC;YACjD,CAAC;YAED,IAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAErD,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACtB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;oBAChC,KAAI,CAAC,oBAAoB,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBACtD,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpC,KAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;gBACpD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,KAAI,CAAC,oBAAoB,GAAG,CAAC,qBAAqB,CAAC,CAAC;gBACxD,CAAC;YACL,CAAC;QACL,CAAC;;IACL,CAAC;IAED,sBAAI,oCAAO;aAAX;YACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;;;OAAA;IAED,sBAAI,4CAAe;aAAnB;YACI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;;;OAAA;IAED,sBAAI,gDAAmB;aAAvB;YACI,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC;QACrC,CAAC;;;OAAA;IAEL,sBAAC;AAAD,CAxCA,AAwCC,CAxCoC,WAAW,GAwC/C;;AAED;;;;GAIG;AACH,MAAM,CAAC,IAAM,oBAAoB,GAAgB,IAAI,eAAe,EAAE,CAAC","file":"options.js","sourceRoot":"","sourcesContent":["import {isArray} from \"rxjs/util/isArray\";\nimport {Protocol, HTTP_PROTOCOL} from \"./protocol\";\nimport {DEFAULT_STATUS_LABELS, DefaultStatusLabel, StatusLabelMap} from \"./status-collector\";\n\n/**\n * Constructs URL relative to base URL.\n *\n * @param baseUrl base URL.\n * @param url URL.\n *\n * @returns {string} If `baseUrl` is not specified, or empty string, or `url` is absolute, then returns unmodified `url`.\n * Otherwise concatenates `baseUrl` and `url` separating them by `/` sign.\n */\nexport function relativeUrl(baseUrl: string | undefined, url: string): string {\n    if (!baseUrl) {\n        return url;\n    }\n    if (url[0] === \"/\") {\n        return url;// Absolute URL\n    }\n    if (url.match(/^(\\w*:)?\\/\\//)) {\n        return url;// Full URL\n    }\n    return baseUrl + \"/\" + url;\n}\n\n/**\n * Global Rike options interface.\n */\nexport interface RikeOptionsArgs {\n\n    /**\n     * Base URL of all relative URLs.\n     *\n     * All relative Rike request URLs will be resolved against this one.\n     */\n    readonly baseUrl?: string;\n\n    /**\n     * Default operations protocol.\n     *\n     * If not specified then `HTTP_PROTOCOL` will be used.\n     */\n    readonly defaultProtocol?: Protocol<any, any>;\n\n    /**\n     * A map of Rike operations status labels to use by default.\n     *\n     * If not specified the `DEFAULT_STATUS_LABELS` will be used.\n     *\n     * Default status labels are always of type {{DefaultStatusLabel}}.\n     */\n    readonly defaultStatusLabels?: StatusLabelMap<DefaultStatusLabel> | StatusLabelMap<DefaultStatusLabel>[];\n\n}\n\n/**\n * Global Rike options.\n *\n * To overwrite global options add a provider for {{BaseRikeOptions}} instance with {{RikeOptions}} as token:\n * ```ts\n * bootstrap(AppComponent, {provide: RikeOptions, new BaseRikeOptions({baseUrl: \"/rike\"})});\n * ```\n */\nexport abstract class RikeOptions implements RikeOptionsArgs {\n\n    abstract readonly baseUrl?: string;\n\n    abstract readonly defaultProtocol: Protocol<any, any>;\n\n    abstract defaultStatusLabels: StatusLabelMap<DefaultStatusLabel> | StatusLabelMap<DefaultStatusLabel>[];\n\n    /**\n     * Constructs URL relative to `baseUrl`.\n     *\n     * @param url URL\n     *\n     * @returns {string} resolved URL.\n     */\n    relativeUrl(url: string): string {\n        return relativeUrl(this.baseUrl, url);\n    }\n\n}\n\n/**\n * Basic [global resource options][RikeOptions] implementation.\n *\n * Can be used to override the global resource options.\n */\nexport class BaseRikeOptions extends RikeOptions {\n\n    private _baseUrl?: string;\n    private _defaultProtocol: Protocol<any, any> = HTTP_PROTOCOL;\n    private _defaultStatusLabels: StatusLabelMap<DefaultStatusLabel>[] = [DEFAULT_STATUS_LABELS];\n\n    constructor(opts?: RikeOptionsArgs) {\n        super();\n        if (opts) {\n            this._baseUrl = opts.baseUrl;\n            if (opts.defaultProtocol) {\n                this._defaultProtocol = opts.defaultProtocol;\n            }\n\n            const defaultStatusLabels = opts.defaultStatusLabels;\n\n            if (defaultStatusLabels) {\n                if (!isArray(defaultStatusLabels)) {\n                    this._defaultStatusLabels = [defaultStatusLabels];\n                } else if (defaultStatusLabels.length) {\n                    this._defaultStatusLabels = defaultStatusLabels;\n                } else {\n                    this._defaultStatusLabels = [DEFAULT_STATUS_LABELS];\n                }\n            }\n        }\n    }\n\n    get baseUrl(): string | undefined {\n        return this._baseUrl;\n    }\n\n    get defaultProtocol(): Protocol<any, any> {\n        return this._defaultProtocol;\n    }\n\n    get defaultStatusLabels(): StatusLabelMap<DefaultStatusLabel>[] {\n        return this._defaultStatusLabels;\n    }\n\n}\n\n/**\n * Default resource options.\n *\n * @type {RikeOptions}\n */\nexport const DEFAULT_RIKE_OPTIONS: RikeOptions = new BaseRikeOptions();\n"]}