{"version":3,"sources":["protocol.spec.ts"],"names":[],"mappings":"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","file":"protocol.spec.js","sourceRoot":"","sourcesContent":["import {RequestOptionsArgs, Response, RequestOptions, ResponseOptions} from \"@angular/http\";\nimport {Protocol, JSON_PROTOCOL, ErrorResponse} from \"./protocol\";\n\ninterface In {\n    request: string;\n    update?: string;\n    written?: string;\n    numeric?: number;\n}\n\ninterface In2 {\n    request2: string;\n}\n\ninterface Out {\n    response: string;\n}\n\ninterface Out2 {\n    response2: string;\n}\n\nclass TestProtocol extends Protocol<In, Out> {\n\n    constructor() {\n        super();\n    }\n\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return new RequestOptions(options).merge({url: \"/request\", search: \"prepared=true\"})\n    }\n\n    writeRequest(request: In, options: RequestOptionsArgs): RequestOptionsArgs {\n        request.written = \"written1\";\n        return new RequestOptions(options).merge({body: request});\n    }\n\n    readResponse(response: Response): Out {\n        return {\n            response: \"response1\"\n        };\n    }\n\n}\n\ndescribe(\"Protocol\", () => {\n\n    const protocol = new TestProtocol();\n\n    it(\"prepares request before\", () => {\n\n        const proto = protocol.prior().prepareRequest(opts => new RequestOptions(opts).merge({search: \"updated=true\"}));\n        const opts = proto.prepareRequest({});\n\n        expect(opts.url).toBe(\"/request\");\n        expect(opts.search && opts.search.toString()).toEqual(\"prepared=true\");\n    });\n\n    it(\"prepares request after\", () => {\n\n        const proto = protocol.then().prepareRequest(opts => new RequestOptions(opts).merge({search: \"updated=true\"}));\n        const opts = proto.prepareRequest({});\n\n        expect(opts.url).toBe(\"/request\");\n        expect(opts.search && opts.search.toString()).toEqual(\"updated=true\");\n    });\n\n    it(\"writes request\", () => {\n\n        const proto = protocol.instead().writeRequest((request: In2, opts: RequestOptionsArgs) => {\n            return new RequestOptions(opts).merge({body: request.request2});\n        });\n        const opts = proto.writeRequest({request2: \"request2\"}, {});\n\n        expect(opts.body).toBe(\"request2\");\n\n    });\n\n    it(\"updates request before it is written\", () => {\n\n        const proto = protocol.prior().updateRequest((request, opts) => {\n            request.update = \"update1\";\n            request.written = \"rewritten1\";\n            return new RequestOptions(opts).merge({body: request});\n        });\n        const opts = proto.writeRequest({request: \"request1\"}, {});\n        const body = opts.body as In;\n\n        expect(body.request).toBe(\"request1\");\n        expect(body.update).toBe(\"update1\");\n        expect(body.written).toBe(\"written1\");\n    });\n\n    it(\"updates request after it is written\", () => {\n\n        const proto = protocol.then().updateRequest(\n            (request, opts) => {\n                request.update = \"update1\";\n                request.written = \"rewritten1\";\n                return new RequestOptions(opts).merge({body: request});\n            });\n        const opts = proto.writeRequest({request: \"request1\"}, {});\n        const body = opts.body as In;\n\n        expect(body.request).toBe(\"request1\");\n        expect(body.update).toBe(\"update1\");\n        expect(body.written).toBe(\"rewritten1\");\n    });\n\n    it(\"reads response\", () => {\n\n        const proto = protocol.instead().readResponse(() => {\n            return {\n                response2: \"response2\"\n            } as Out2\n        });\n        const response = proto.readResponse(new Response(new ResponseOptions()));\n\n        expect(response.response2).toBe(\"response2\");\n    });\n\n    it(\"handles error\", () => {\n\n        const proto = protocol.then().handleError(error => {\n\n            const err = error as TestErrorResponse;\n\n            err.test = \"error1\";\n\n            return err;\n        });\n        const error = proto.handleError({response: new Response(new ResponseOptions())}) as TestErrorResponse;\n\n        expect(error.test).toBe(\"error1\");\n    });\n});\n\ninterface TestErrorResponse extends ErrorResponse {\n    test: any;\n}\n\ndescribe(\"JSON protocol\", () => {\n\n    const protocol = JSON_PROTOCOL;\n\n    it(\"writes request\", () => {\n\n        const request: In = {request: \"some value\", numeric: 13};\n        const opts = protocol.writeRequest(request, {});\n        const response: In = JSON.parse(opts.body);\n\n        expect(opts.headers!.get(\"Content-Type\")).toBe(\"application/json\");\n        expect(response.request).toBe(request.request);\n        expect(response.numeric).toBe(request.numeric);\n    });\n\n    it(\"reads response\", () => {\n\n        const value: In = {\n            request: \"Request1\",\n            numeric: 333,\n        };\n        const read: In = protocol.readResponse(new Response(new ResponseOptions({\n            body: JSON.stringify(value),\n        })));\n\n        expect(read.request).toBe(value.request);\n        expect(read.numeric).toBe(value.numeric);\n    });\n});\n"]}