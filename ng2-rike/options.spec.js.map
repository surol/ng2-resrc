{"version":3,"sources":["options.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,WAAW,CAAC;AAEtC,QAAQ,CAAC,aAAa,EAAE;IACpB,EAAE,CAAC,wBAAwB,EAAE;QACzB,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE;QACzB,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE;QAC5B,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE;QACxB,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE;QAChC,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACnC,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE;QAC9B,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE;QACjD,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,2BAA2B,CAAC,CAAC,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;IAC9G,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"options.spec.js","sourceRoot":"","sourcesContent":["import {relativeUrl} from \"./options\";\n\ndescribe(\"relativeUrl\", () => {\n    it(\"works without base URL\", () => {\n        expect(relativeUrl(undefined, \"url\")).toBe(\"url\");\n    });\n\n    it(\"handles empty base URL\", () => {\n        expect(relativeUrl(\"\", \"url\")).toBe(\"url\");\n    });\n\n    it(\"resolves against base URL\", () => {\n        expect(relativeUrl(\"base-url\", \"url\")).toBe(\"base-url/url\");\n    });\n\n    it(\"resolves absolute URL\", () => {\n        expect(relativeUrl(\"/base-url\", \"/absolute-url\")).toBe(\"/absolute-url\");\n    });\n\n    it(\"resolves schema-qualified URL\", () => {\n        expect(relativeUrl(\"/base-url\", \"https://some.host/path\")).toBe(\"https://some.host/path\");\n    });\n\n    it(\"resolves URL with default schema\", () => {\n        expect(relativeUrl(\"/base-url\", \"//some.host/path\")).toBe(\"//some.host/path\");\n    });\n\n    it(\"resolves URL without schema\", () => {\n        expect(relativeUrl(\"/base-url\", \"://some.host/path\")).toBe(\"://some.host/path\");\n    });\n\n    it(\"resolves URL which looks like schema-qualified\", () => {\n        expect(relativeUrl(\"/base-url\", \"abc#http://some.host/path\")).toBe(\"/base-url/abc#http://some.host/path\");\n    });\n});\n"]}