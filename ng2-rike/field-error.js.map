{"version":3,"file":"field-error.js","sourceRoot":"","sources":["field-error.ts"],"names":[],"mappings":"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","sourcesContent":["import {ErrorResponse} from \"./protocol\";\nimport {Response} from \"@angular/http\";\n\n/**\n * Error response.\n *\n * Any object can be converted to `ErrorResponse` with `toErrorResponse()` function.\n */\nexport interface FieldErrorResponse extends ErrorResponse {\n\n    /**\n     * Field errors.\n     */\n    fieldErrors: FieldErrors;\n\n}\n\n/**\n * Field errors.\n *\n * Any field of this object is an arrays of errors corresponding to this field. Such array should never be empty.\n *\n * The special case is field named `\"*\"`. It contains errors not related to particular field.\n */\nexport interface FieldErrors {\n    [field: string]: FieldError[];\n}\n\n/**\n * Field error.\n */\nexport interface FieldError {\n\n    /**\n     * Optional error code.\n     */\n    code?: string;\n\n    /**\n     * Error message.\n     */\n    message: string;\n\n}\n\nfunction isJsonResponse(httpResponse: Response): boolean {\n\n    let contentType = httpResponse.headers.get(\"Content-Type\");\n\n    if (!contentType) {\n        return false;\n    }\n\n    const idx = contentType.indexOf(\";\");\n\n    if (idx >= 0) {\n        contentType = contentType.substring(0, idx);\n    }\n\n    return contentType.trim() === \"application/json\";\n}\n\n/**\n * Appends field errors to {{ErrorResponse}}.\n *\n * If field errors already present in `ErrorResponse` then does nothing.\n *\n * This function can be used as {{Protocol}} error handler.\n *\n * @param error object to convert.\n *\n * @return {FieldErrorResponse} constructed error httpResponse.\n */\nexport function addFieldErrors(error: ErrorResponse): FieldErrorResponse {\n\n    const response = error as FieldErrorResponse;\n\n    if (response.fieldErrors) {\n        // Field errors already present.\n        return response;\n    }\n\n    const httpResponse = error.response;\n    let body: any | undefined = undefined;\n\n    // Attempt to parse JSON body\n    if (isJsonResponse(httpResponse)) {\n        try {\n            body = httpResponse.json()\n        } catch (e) {\n            console.error(\"Failed to parse JSON error response\", e);\n        }\n    }\n\n    const fieldErrors = toFieldErrors(body);\n\n    if (fieldErrors) {\n        response.fieldErrors = fieldErrors;\n        return response;\n    }\n\n    return defaultFieldErrors(response);\n}\n\nfunction defaultFieldErrors(response: FieldErrorResponse): FieldErrorResponse {\n\n    const httpResponse = response.response;\n    let message = \"ERROR \" + httpResponse.status;\n\n    if (httpResponse.statusText && httpResponse.statusText.toLowerCase() != \"ok\") {\n        message += \": \" + httpResponse.statusText;\n    }\n\n    response.fieldErrors = {\"*\": [{code: \"HTTP\" + httpResponse.status, message}]};\n\n    return response;\n}\n\nfunction toFieldErrors(data: any): FieldErrors | undefined {\n    if (data == null) {\n        return undefined;\n    }\n    if (Array.isArray(data)) {\n\n        const fieldErrors = data.map(toFieldError).filter(notEmptyError);\n\n        return fieldErrors.length ? {\"*\": fieldErrors} : undefined;\n    }\n    if (typeof data !== \"object\") {\n\n        const fieldErrors = [{message: data.toString()}].filter(notEmptyError);\n\n        return fieldErrors.length ? {\"*\": fieldErrors} : undefined;\n    }\n\n    const errors = data as FieldErrors;\n    const result: FieldErrors = {};\n    let hasErrors = false;\n\n    for (let field in errors) {\n        if (errors.hasOwnProperty(field)) {\n\n            const errorArray = toFieldErrorArray(errors[field]);\n\n            if (errorArray.length) {\n                result[field] = errorArray;\n                hasErrors = true;\n            }\n        }\n    }\n\n    return hasErrors ? result : undefined;\n}\n\nfunction toFieldErrorArray(data: any): FieldError[] {\n    if (data == null) {\n        return [];\n    }\n    if (Array.isArray(data)) {\n        return data.map(toFieldError).filter(notEmptyError);\n    }\n    return [toFieldError(data)].filter(notEmptyError);\n}\n\nfunction toFieldError(data: any): FieldError {\n    if (data == null) {\n        return {message: \"\"};\n    }\n\n    const fieldError = data as FieldError;\n\n    if (typeof fieldError.message === \"string\" && (fieldError.code == null || fieldError.code === \"string\")) {\n        return fieldError;\n    }\n    if (fieldError.message != null) {\n        return {\n            code: fieldError.code != null ? fieldError.code.toString() : undefined,\n            message: fieldError.message.toString(),\n        };\n    }\n\n    return {message: fieldError.toString()};\n}\n\nfunction notEmptyError(item?: FieldError): boolean {\n    return !!item && (!!item.message || !!item.code);\n}\n"]}