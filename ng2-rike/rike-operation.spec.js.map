{"version":3,"file":"rike-operation.spec.js","sourceRoot":"","sources":["rike-operation.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Response, RequestMethod, ResponseOptions} from \"@angular/http\";\nimport {inject} from \"@angular/core/testing\";\nimport {MockBackend, MockConnection} from \"@angular/http/testing\";\nimport {Observable} from \"rxjs/Rx\";\nimport {Rike, RikeTarget, RikeOperation} from \"./rike\";\nimport {addRikeProviders} from \"./rike.spec\";\nimport {RikeEvent, RikeErrorEvent} from \"./event\";\n\ndescribe(\"RikeOperation\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n    let target: RikeTarget<any, Response>;\n\n    beforeEach(() => addRikeProviders());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n        target = rike.target(\"target\").withBaseUrl(\"target-url\");\n    }));\n\n    function loadRequestTest(\n        method: RequestMethod,\n        read: (op: RikeOperation<any, any>) => ((url: string) => Observable<Response>)): (done: DoneFn) => void {\n        return done => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/target-url/request-url\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n\n            const op = target.operation(\"operation1\");\n\n            read(op).call(op, \"request-url\").subscribe((response: Response) => {\n                expect(response.text()).toBe(\"response1\");\n                done();\n            });\n        }\n    }\n\n    it(\"processes GET request\", loadRequestTest(RequestMethod.Get, op => op.get));\n    it(\"processes DELETE request\", loadRequestTest(RequestMethod.Delete, op => op.delete));\n    it(\"processes HEAD request\", loadRequestTest(RequestMethod.Head, op => op.head));\n\n    function sendRequestTest(\n        method: RequestMethod,\n        read: (op: RikeOperation<any, any>) =>\n            ((body: any, url: string) => Observable<Response>)): (done: DoneFn) => void {\n        return done => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/target-url/send-request-url\");\n                expect(connection.request.text()).toBe(\"request2\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n\n            const op = target.operation(\"operation1\");\n            let succeed = false;\n\n            read(op).call(op, \"request2\", \"send-request-url\", ).subscribe(\n                (response: Response) => {\n                    expect(response.text()).toBe(\"response1\");\n                    succeed = true;\n                },\n                (err: any) => done.fail(err),\n                () => {\n                    expect(succeed).toBeTruthy(\"No response received\");\n                    done();\n                });\n        }\n    }\n\n    it(\"processes POST request\", sendRequestTest(RequestMethod.Post, op => op.post));\n    it(\"processes PUT request\", sendRequestTest(RequestMethod.Put, op => op.put));\n    it(\"processes PATCH request\", sendRequestTest(RequestMethod.Patch, op => op.patch));\n\n    it(\"loads with GET by default\", loadRequestTest(RequestMethod.Get, op => op.load));\n    it(\"loads with specified method\", loadRequestTest(RequestMethod.Options, op => op.withMethod(\"options\").load));\n    it(\"loads from specified URL\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            expect(connection.request.url).toBe(\"/test-root/target-url/load-url\");\n            connection.mockRespond(new Response(new ResponseOptions()));\n        });\n\n        target.operation(\"operation1\").withUrl(\"load-url\").load().subscribe(done);\n    });\n    it(\"loads from target URL by default\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            expect(connection.request.url).toBe(\"/test-root/target-url\");\n            connection.mockRespond(new Response(new ResponseOptions()));\n        });\n\n        target.operation(\"operation1\").load().subscribe(done);\n    });\n\n    it(\"sends with specified method\", sendRequestTest(RequestMethod.Put, op => op.withMethod(\"put\").send));\n    it(\"sends to specified URL\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            expect(connection.request.url).toBe(\"/test-root/target-url/send-url\");\n            connection.mockRespond(new Response(new ResponseOptions()));\n        });\n\n        target.operation(\"operation1\").withUrl(\"send-url\").send(\"abc\").subscribe(done);\n    });\n    it(\"sends to target URL by default\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            expect(connection.request.url).toBe(\"/test-root/target-url\");\n            connection.mockRespond(new Response(new ResponseOptions()));\n        });\n\n        target.operation(\"operation1\").send(\"abc\").subscribe(done);\n    });\n\n});\n\ndescribe(\"RikeOperation event\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n    let target: RikeTarget<any, Response>;\n\n    beforeEach(() => addRikeProviders());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n        target = rike.target(\"target\").withBaseUrl(\"target-url\");\n    }));\n\n    function mockRespond() {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockRespond(new Response(new ResponseOptions({\n                body: \"response1\",\n            })));\n        });\n    }\n\n    it(\"start\", done => {\n        mockRespond();\n\n        const op = target.operation(\"operation\");\n        let complete = false;\n\n        target.rikeEvents.subscribe(\n            (ev: RikeEvent) => {\n                if (!complete) {\n                    complete = true;\n                    expect(ev.operation).toBe(op);\n                    expect(ev.target).toBe(target);\n                    expect(ev.complete).toBeFalsy();\n                    done();\n                }\n            },\n            (err: any) => done.fail(err));\n\n        op.load().subscribe();\n    });\n\n    it(\"complete\", done => {\n        mockRespond();\n\n        const op = target.operation(\"operation\");\n        let events = 0;\n\n        target.rikeEvents.subscribe(\n            (ev: RikeEvent) => {\n                expect(ev.operation).toBe(op);\n                expect(ev.target).toBe(target);\n                if (events++) {\n                    expect(ev.complete).toBeTruthy();\n                    expect(ev.error).toBeUndefined();\n\n                    const result = ev.result as Response;\n\n                    expect(result.text()).toBe(\"response1\");\n                    done();\n                }\n            },\n            (err: any) => done.fail(err));\n\n        op.load().subscribe();\n    });\n\n    it(\"error\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockError(new Error(\"error1\"));\n        });\n\n        const op = target.operation(\"operation\");\n        let events = 0;\n\n        target.rikeEvents.subscribe(\n            (ev: RikeEvent) => {\n                if (!events++) {\n                    expect(ev.operation).toBe(op);\n                    expect(ev.target).toBe(target);\n                } else {\n                    expect(events).toBe(2, \"Start event not received yet\");\n                    expect(ev.complete).toBeTruthy();\n\n                    const error = ev.error as Error;\n\n                    expect(error.message).toBe(\"error1\");\n                    done();\n                }\n            },\n            (err: any) => done.fail(err));\n\n        op.load().subscribe(() => {}, () => {});\n    });\n\n    it(\"exception\", done => {\n        back.connections.subscribe(() => {\n            throw new Error(\"error1\");\n        });\n\n        const op = target.operation(\"operation\");\n        let events = 0;\n\n        target.rikeEvents.subscribe(\n            (ev: RikeEvent) => {\n                events++;\n                expect(ev.operation).toBe(op);\n                expect(ev.target).toBe(target);\n            },\n            (ev: RikeErrorEvent) => {\n                expect(events).toBe(1, \"Start event not received yet\");\n                expect(ev.complete).toBeTruthy();\n\n                const error = ev.error as Error;\n\n                expect(error.message).toBe(\"error1\");\n                done();\n            });\n\n        expect(() => op.load().subscribe()).toThrowError(\"error1\");\n    });\n});\n"]}