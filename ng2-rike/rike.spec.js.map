{"version":3,"file":"rike.spec.js","sourceRoot":"","sources":["rike.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {Observable} from \"rxjs/Rx\";\nimport {\n    Http,\n    ConnectionBackend,\n    Response,\n    ResponseOptions,\n    RequestOptionsArgs,\n    RequestOptions,\n    RequestMethod,\n    BaseRequestOptions\n} from \"@angular/http\";\nimport {inject, TestBed, fakeAsync, tick} from \"@angular/core/testing\";\nimport {MockBackend, MockConnection} from \"@angular/http/testing\";\nimport {platformBrowserDynamicTesting, BrowserDynamicTestingModule} from \"@angular/platform-browser-dynamic/testing\";\nimport {Rike, requestMethod} from \"./rike\";\nimport {RikeOptions, BaseRikeOptions} from \"./options\";\nimport {HTTP_PROTOCOL, jsonProtocol, Protocol, ErrorResponse} from \"./protocol\";\n\nvar testingSetupComplete = false;\n\nexport function setupTesting() {\n    if (!testingSetupComplete) {\n        testingSetupComplete = true;\n        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());\n    }\n}\n\nexport function configureHttpTesting() {\n    setupTesting();\n    TestBed.configureTestingModule({\n        providers: [\n            {\n                provide: RequestOptions,\n                useValue: new BaseRequestOptions(),\n            },\n            MockBackend,\n            {\n                provide: ConnectionBackend,\n                useExisting: MockBackend\n            },\n            Http,\n            {\n                provide: RikeOptions,\n                useValue: new BaseRikeOptions({baseUrl: \"/test-root\"})\n            },\n        ]\n    });\n}\n\nexport function configureRikeTesting() {\n    configureHttpTesting();\n    TestBed.configureTestingModule({\n        providers: [\n            Rike,\n        ]\n    });\n}\n\nexport function nextFrom<T>(op: Observable<T>): T | undefined {\n\n    let result: T | undefined = undefined;\n\n    op.subscribe(res => result = res);\n\n    tick();\n\n    return result;\n}\n\nexport function nextErrorFrom<T>(op: Observable<any>): T | undefined {\n\n    let error: T | undefined = undefined;\n\n    op.subscribe(\n        response => {\n            console.log(response);\n            fail(\"Response received: \" + response);\n        },\n        err => error = err);\n\n    tick();\n\n    return error;\n}\n\ndescribe(\"Rike\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n\n    beforeEach(() => configureRikeTesting());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n    }));\n\n    it(\"is initialized\", () => {\n        expect(rike.options.baseUrl).toBe(\"/test-root\");\n    });\n\n    function loadRequestTest(\n        method: RequestMethod,\n        read: (rike: Rike) => ((url: string) => Observable<Response>)): () => void {\n        return fakeAsync(() => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/request-url\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n\n            const response = nextFrom<Response>(read(rike).call(rike, \"request-url\"));\n\n            expect(response).toBeDefined(\"Response not received\");\n            expect(response && response.text()).toBe(\"response1\", \"Wrong response\");\n        });\n    }\n\n    it(\"processes GET request\", loadRequestTest(RequestMethod.Get, rike => rike.get));\n    it(\"processes DELETE request\", loadRequestTest(RequestMethod.Delete, rike => rike.delete));\n    it(\"processes HEAD request\", loadRequestTest(RequestMethod.Head, rike => rike.head));\n\n    function sendRequestTest(\n        method: RequestMethod,\n        read: (rike: Rike) => ((url: string, body: any) => Observable<Response>)): () => void {\n        return fakeAsync(() => {\n            back.connections.subscribe((connection: MockConnection) => {\n                expect(connection.request.method).toBe(method);\n                expect(connection.request.url).toBe(\"/test-root/send-request-url\");\n                expect(connection.request.text()).toBe(\"request2\");\n                connection.mockRespond(new Response(new ResponseOptions({\n                    body: \"response1\",\n                })));\n            });\n\n            const response = nextFrom<Response>(read(rike).call(rike, \"send-request-url\", \"request2\"));\n\n            expect(response).toBeDefined(\"Response not received\");\n            expect(response && response.text()).toBe(\"response1\", \"Wrong response\");\n        });\n    }\n\n    it(\"processes POST request\", sendRequestTest(RequestMethod.Post, rike => rike.post));\n    it(\"processes PUT request\", sendRequestTest(RequestMethod.Put, rike => rike.put));\n    it(\"processes PATCH request\", sendRequestTest(RequestMethod.Patch, rike => rike.patch));\n\n    it(\"processes HTTP error\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockError(new Error(\"Response error\"));\n        });\n        rike.get(\"request-url\").subscribe(\n            () => {\n                done.fail(\"Response received\");\n            },\n            (error: ErrorResponse) => {\n\n                const err = error.error as Error;\n\n                expect(err.message).toBe(\"Response error\");\n\n                done();\n            });\n    });\n\n    it(\"creates target with the protocol\", () => {\n\n        const targetId = \"target1\";\n        const target = rike.target(targetId);\n\n        expect(target.target).toBe(targetId);\n        expect(target.protocol).toBe(HTTP_PROTOCOL);\n    });\n\n    it(\"creates JSON target\", () => {\n\n        const targetId = \"target1\";\n        const target = rike.json(targetId);\n\n        expect(target.target).toBe(targetId);\n        expectJsonProtocol(target.protocol);\n    });\n\n    it(\"creates target with specified protocol\", () => {\n\n        const protocol = jsonProtocol<string, string>()\n            .instead()\n            .writeRequest((val: number, opts: RequestOptionsArgs) =>\n                new RequestOptions(opts).merge({body: val}));\n        const targetId = \"target1\";\n        const target = rike.target(targetId, protocol);\n\n        expect(target.target).toBe(targetId);\n        expect(protocol.writeRequest(-5, {}).body).toBe(-5);\n    });\n});\n\nfunction requestMethodTest(method: RequestMethod, value: string | RequestMethod) {\n    return () => expect(requestMethod(value)).toBe(method);\n}\n\ndescribe(\"requestMethod\", () => {\n    it(\"GET\", requestMethodTest(RequestMethod.Get, \"GeT\"));\n    it(\"POST\", requestMethodTest(RequestMethod.Post, \"pOSt\"));\n    it(\"PUT\", requestMethodTest(RequestMethod.Put, \"put\"));\n    it(\"DELETE\", requestMethodTest(RequestMethod.Delete, \"deletE\"));\n    it(\"OPTIONS\", requestMethodTest(RequestMethod.Options, \"OPTIONS\"));\n    it(\"HEAD\", requestMethodTest(RequestMethod.Head, \"hEad\"));\n    it(\"PATCH\", requestMethodTest(RequestMethod.Patch, \"pAtch\"));\n    it(\"specified as is\", requestMethodTest(RequestMethod.Post, RequestMethod.Post));\n\n    it(\"rejects unknown method\", () => {\n        expect(() => requestMethod(\"some\")).toThrow();\n    });\n\n    it(\"rejects empty method\", () => {\n        expect(() => requestMethod(\"\")).toThrow();\n    });\n});\n\ninterface Data {\n    a: string;\n    b: number;\n    c: string[];\n}\n\nexport function expectJsonProtocol(protocol: Protocol<any, any>) {\n\n    const value: Data = {\n        a: \"test\",\n        b: 13,\n        c: [\"foo\", \"bar\", \"baz\"]\n    };\n\n    const written = protocol.writeRequest(value, {}).body as string;\n    const restored: Data = JSON.parse(written);\n\n    expect(restored.a).toBe(value.a, \"Invalid data restored from JSON\");\n    expect(restored.b).toBe(value.b, \"Invalid data restored from JSON\");\n    expect(restored.c).toEqual(value.c, \"Invalid data restored from JSON\");\n}\n"]}