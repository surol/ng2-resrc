{"version":3,"file":"event.js","sourceRoot":"","sources":["event.ts"],"names":[],"mappings":"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","sourcesContent":["import {EventEmitter} from \"@angular/core\";\nimport {RikeTarget, RikeOperation} from \"./rike\";\nimport {ErrorResponse} from \"./protocol\";\n\n/**\n * REST-like resource access event emitter.\n *\n * Multiple instances of this class could be injected into controller or service to listen for Rike events.\n *\n * Use [provideEventSource] function to register event sources.\n */\nexport abstract class RikeEventSource {\n\n    /**\n     * Rike events emitter.\n     */\n    abstract readonly rikeEvents: EventEmitter<RikeEvent>;\n\n}\n\n/**\n * Basic REST-like resource access event.\n *\n * Such events are emitted by [Rike event sources][RikeEventsSource].\n */\nexport abstract class RikeEvent {\n\n    /**\n     * Operation target.\n     */\n    get target(): RikeTarget<any, any> {\n        return this.operation.target;\n    }\n\n    /**\n     * Rike operation.\n     */\n    abstract readonly operation: RikeOperation<any, any>;\n\n    /**\n     * Whether an operation is complete.\n     *\n     * `true` on error or successful completion event.\n     */\n    abstract readonly complete: boolean;\n\n    /**\n     * The error occurred.\n     *\n     * `undefined` if this is not an error event.\n     */\n    abstract readonly error?: any;\n\n    /**\n     * Error response.\n     */\n    abstract readonly errorResponse?: ErrorResponse;\n\n    /**\n     * Whether this is an operation cancel.\n     *\n     * @return {boolean} `true` if operation cancelled, or `false` otherwise.\n     */\n    get cancel(): boolean {\n        return false;\n    }\n\n    /**\n     * The operation that cancelled this operation.\n     */\n    abstract readonly cancelledBy?: RikeOperationEvent;\n\n    /**\n     * Operation result, if any.\n     */\n    abstract readonly result?: any;\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is started.\n */\nexport class RikeOperationEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return false;\n    }\n\n    get error(): undefined {\n        return undefined;\n    }\n\n    get errorResponse(): undefined {\n        return undefined;\n    }\n\n    get cancelledBy(): undefined {\n        return undefined;\n    }\n\n    get result(): undefined {\n        return undefined;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is successfully completed.\n */\nexport class RikeSuccessEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>, private _result: any) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return true;\n    }\n\n    get error(): undefined {\n        return undefined;\n    }\n\n    get errorResponse(): undefined {\n        return undefined;\n    }\n\n    get cancelledBy(): undefined {\n        return undefined;\n    }\n\n    get result(): any {\n        return this._result;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is failed.\n *\n * An object of this type is also reported as an error when some internal exception occurs.\n */\nexport abstract class RikeErrorEvent extends RikeEvent {\n\n    constructor(private _operation: RikeOperation<any, any>, private _error: any) {\n        super();\n    }\n\n    get operation(): RikeOperation<any, any> {\n        return this._operation;\n    }\n\n    get complete(): boolean {\n        return true;\n    }\n\n    get error(): any {\n        return this._error;\n    }\n\n    get errorResponse(): ErrorResponse | undefined {\n        return undefined;\n    }\n\n    get cancelledBy(): RikeOperationEvent | undefined {\n        return undefined;\n    }\n\n    get result(): undefined {\n        return undefined;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource caused an exception.\n *\n * An object of this type is reported as an error.\n */\nexport class RikeExceptionEvent extends RikeErrorEvent {\n\n    constructor(operation: RikeOperation<any, any>, error: any, private _errorResponse?: ErrorResponse) {\n        super(operation, error);\n    }\n\n    get errorResponse(): ErrorResponse | undefined {\n        return this._errorResponse;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource returned error.\n */\nexport class RikeErrorResponseEvent extends RikeErrorEvent {\n\n    constructor(operation: RikeOperation<any, any>, private _errorResponse: ErrorResponse) {\n        super(operation, _errorResponse.error || _errorResponse);\n    }\n\n    get errorResponse(): ErrorResponse {\n        return this._errorResponse;\n    }\n\n}\n\n/**\n * An event emitted when operation on a REST-like resource is cancelled.\n */\nexport class RikeCancelEvent extends RikeErrorEvent {\n\n    constructor(operation: RikeOperation<any, any>, private _cancelledBy?: RikeOperationEvent) {\n        super(operation, _cancelledBy || \"cancel\");\n    }\n\n    get error(): RikeOperationEvent | undefined {\n        return this.cancelledBy;\n    }\n\n    get cancel(): boolean {\n        return true;\n    }\n\n    get cancelledBy(): RikeOperationEvent | undefined {\n        return this._cancelledBy;\n    }\n\n}\n"]}