{"version":3,"file":"resource-provider.js","sourceRoot":"","sources":["resource-provider.ts"],"names":[],"mappings":"OACO,EAAC,QAAQ,EAAC,MAAM,YAAY;OAC5B,EAAC,kBAAkB,EAAC,MAAM,yBAAyB;AAE1D;;;;;;;;;;;;;GAaG;AACH,gCAAgC,EAQ/B;QARgC,oBAAO,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,4BAAW,EAAE,0BAAU,EAAE,cAAI;IAUvF,IAAM,KAAK,GAAG,OAAO,IAAI,QAAQ,CAAC;IAElC,MAAM,CAAC;QACH;YACI,OAAO,EAAE,KAAK;YACd,kBAAQ;YACR,kBAAQ;YACR,wBAAW;YACX,sBAAU;YACV,UAAI;SACP;QACD,kBAAkB,CAAC;YACf,UAAU,EAAE,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,UAAU,EAAnB,CAAmB;YACvD,IAAI,EAAE,CAAC,KAAK,CAAC;SAChB,CAAC;KACL,CAAC;AACN,CAAC","sourcesContent":["import {Type} from \"@angular/core\";\nimport {Resource} from \"./resource\";\nimport {provideEventSource} from \"./event-source-provider\";\n\n/**\n * Constructs provider recipe for {{Resource}}.\n *\n * Also registers the resource as source of Rike operation events.\n *\n * @param provide provider token. If not specified the `Resource` will be used.\n * @param useClass\n * @param useValue\n * @param useExisting\n * @param useFactory\n * @param deps\n *\n * @return new provider recipe.\n */\nexport function provideResource({provide, useClass, useValue, useExisting, useFactory, deps}: {\n    provide?: any,\n    useClass?: Type<any>;\n    useValue?: any;\n    useExisting?: any;\n    useFactory?: Function;\n    deps?: Object[];\n    multi?: boolean;\n}): any {\n\n    const token = provide || Resource;\n\n    return [\n        {\n            provide: token,\n            useClass,\n            useValue,\n            useExisting,\n            useFactory,\n            deps,\n        },\n        provideEventSource({\n            useFactory: (resource: Resource) => resource.rikeTarget,\n            deps: [token],\n        })\n    ];\n}\n"]}