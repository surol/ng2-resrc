{"version":3,"sources":["resource-provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,cAAc,EAAiB,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAC,kBAAkB,EAAC,MAAM,yBAAyB,CAAC;AAE3D,IAAI,aAAa,GAAG,CAAC,CAAC;AAEtB;;;;;;GAMG;AACH,MAAM,0BAA0B,EAQ/B;QARgC,oBAAO,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,4BAAW,EAAE,0BAAU,EAAE,cAAI;IAUvF,IAAM,KAAK,GAAG,OAAO,IAAI,IAAI,cAAc,CAAM,UAAU,GAAG,EAAE,aAAa,CAAC,CAAC;IAE/E,MAAM,CAAC;QACH;YACI,OAAO,EAAE,KAAK;YACd,QAAQ,UAAA;YACR,QAAQ,UAAA;YACR,WAAW,aAAA;YACX,UAAU,YAAA;YACV,IAAI,MAAA;SACP;QACD,kBAAkB,CAAC;YACf,WAAW,EAAE,KAAK;SACrB,CAAC;KACL,CAAC;AACN,CAAC","file":"resource-provider.js","sourceRoot":"","sourcesContent":["import {InjectionToken, Provider, Type} from \"@angular/core\";\nimport {provideEventSource} from \"./event-source-provider\";\n\nvar resourceIdSeq = 0;\n\n/**\n * Constructs provider recipe for {{Resource}}.\n *\n * Also registers the resource as source of Rike operation events.\n *\n * @return new provider recipe.\n */\nexport function provideResource({provide, useClass, useValue, useExisting, useFactory, deps}: {\n    provide?: any,\n    useClass?: Type<any>;\n    useValue?: any;\n    useExisting?: any;\n    useFactory?: Function;\n    deps?: Object[];\n    multi?: boolean;\n}): Provider {\n\n    const token = provide || new InjectionToken<any>(\"resource\" + ++resourceIdSeq);\n\n    return [\n        {\n            provide: token,\n            useClass,\n            useValue,\n            useExisting,\n            useFactory,\n            deps,\n        },\n        provideEventSource({\n            useExisting: token,\n        })\n    ];\n}\n"]}