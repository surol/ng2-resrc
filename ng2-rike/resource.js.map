{"version":3,"sources":["resource.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAC,cAAc,EAAqB,MAAM,eAAe,CAAC;AACjE,OAAO,EAAC,UAAU,EAAW,MAAM,SAAS,CAAC;AAC7C,OAAO,EAAC,aAAa,EAAE,YAAY,EAAW,MAAM,YAAY,CAAC;AACjE,OAAO,EAAC,WAAW,EAAC,MAAM,WAAW,CAAC;AAItC;;;;;;;GAOG;AACH;IAAA;IAaA,CAAC;IAJG,sBAAI,gCAAU;aAAd;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QACtC,CAAC;;;OAAA;IAEL,eAAC;AAAD,CAbA,AAaC,IAAA;;AAED;;GAEG;AACH;IAA2C,gCAAQ;IAI/C,sBAAoB,KAAW;QAA/B,YACI,iBAAO,SACV;QAFmB,WAAK,GAAL,KAAK,CAAM;;IAE/B,CAAC;IAKD,sBAAI,8BAAI;QAHR;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAOD,sBAAI,oCAAU;QALd;;;;WAIG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAChC,CAAC;;;OAAA;IAED;;;;;;OAMG;IACH,oCAAa,GAAb;QACI,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;;OAMG;IACO,uCAAgB,GAA1B;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IACjD,CAAC;IAEL,mBAAC;AAAD,CA9CA,AA8CC,CA9C0C,QAAQ,GA8ClD;;AAED;;;;;;;GAOG;AACH;IAAkD,oCAAY;IAI1D,0BAAY,IAAU;eAClB,kBAAM,IAAI,CAAC;IACf,CAAC;IAED,sBAAI,wCAAU;aAAd;YACI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAChC,CAAC;;;OAAA;IAED,wCAAa,GAAb;QACI,MAAM,CAAC,iBAAM,aAAa,WAAE,CAAC;IACjC,CAAC;IAOD,sBAAI,kCAAI;QALR;;;;WAIG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAED;;;;OAIG;IACH,+BAAI,GAAJ;QAAA,iBAuBC;QArBG,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACP,MAAM,CAAC,UAAU,CAAC,EAAE,CAAI,IAAI,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,UAAU,CAAI,UAAC,QAAqB;YAE3C,IAAM,YAAY,GAAG,KAAI,CAAC,UAAU;iBAC/B,SAAS,CAAC,MAAM,CAAC;iBACjB,GAAG,EAAE;iBACL,SAAS,CACN,UAAC,IAAO;gBACJ,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC,EACD,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAArB,CAAqB,EAC9B,cAAM,OAAA,QAAQ,CAAC,QAAQ,EAAE,EAAnB,CAAmB,CAAC,CAAC;YAEnC,MAAM,CAAC,cAAM,OAAA,YAAY,CAAC,WAAW,EAAE,EAA1B,CAA0B,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,iCAAM,GAAN;QACI,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,gCAAK,GAAL;QACI,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IAC3B,CAAC;IAES,2CAAgB,GAA1B;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,EAAQ,CAAC,CAAC;IACxD,CAAC;IAEL,uBAAC;AAAD,CA1EA,AA0EC,CA1EiD,YAAY,GA0E7D;;AAED;;;;;GAKG;AACH;IAA8C,gCAAY;IAEtD,sBAAY,IAAU;eAClB,kBAAM,IAAI,CAAC;IACf,CAAC;IAED,sBAAI,oCAAU;aAAd;YACI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAChC,CAAC;;;OAAA;IAED,oCAAa,GAAb;QACI,MAAM,CAAC,iBAAM,aAAa,WAAE,CAAC;IACjC,CAAC;IAED;;;;;;;;OAQG;IACH,6BAAM,GAAN,UAAO,MAAS;QACZ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/F,CAAC;IAED;;;;;;;;OAQG;IACH,2BAAI,GAAJ,UAAK,EAAO;QACR,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAChF,CAAC;IAED;;;;;;;;OAQG;IACH,6BAAM,GAAN,UAAO,MAAS;QACZ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC9F,CAAC;IAED;;;;;;;;OAQG;IACH,iCAAiC;IACjC,6BAAM,GAAN,UAAO,MAAS;QACZ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IAC3F,CAAC;IAES,uCAAgB,GAA1B;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,EAAQ,CAAC,CAAC;IACxD,CAAC;IAED;;;;;;OAMG;IACO,2CAAoB,GAA9B,UAA+B,MAAS;QACpC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,YAAY,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC;IAC/E,CAAC;IAED;;;;;;;;OAQG;IACO,yCAAkB,GAA5B,UAA6B,EAAO;QAApC,iBAGC;QAFG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,EAAE;aAClC,cAAc,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,CAAC,EAAnC,CAAmC,CAAC,CAAC;IACxE,CAAC;IAED;;;;;;;;;;;OAWG;IACO,wCAAiB,GAA3B,UAA4B,OAA2B,EAAE,EAAO;QAC5D,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;;;;;OASG;IACO,2CAAoB,GAA9B,UAA+B,MAAS;QAAxC,iBAMC;QALG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ;aAC1B,KAAK,EAAE;aACP,aAAa,CAAC,UAAC,MAAM,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC,EAAzC,CAAyC,CAAC;aAC7E,OAAO,EAAE;aACT,YAAY,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,EAAN,CAAM,CAAC,CAAC;IAC1C,CAAC;IAED,uDAAuD;IACvD;;;;;;;;;;;;OAYG;IACO,0CAAmB,GAA7B,UAA8B,OAA2B,EAAE,MAAS;QAChE,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAED;;;;;;;;;OASG;IACO,2CAAoB,GAA9B,UAA+B,MAAS;QAAxC,iBAMC;QALG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ;aAC1B,KAAK,EAAE;aACP,aAAa,CAAC,UAAC,MAAM,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC,EAAzC,CAAyC,CAAC;aAC7E,OAAO,EAAE;aACT,YAAY,CAAC,UAAA,QAAQ,IAAI,OAAA,MAAM,EAAN,CAAM,CAAC,CAAA;IACzC,CAAC;IAED;;;;;;;;;;;OAWG;IACO,0CAAmB,GAA7B,UAA8B,OAA2B,EAAE,MAAS;QAChE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9D,CAAC;IAWD,kCAAkC;IAClC;;;;;;;;;OASG;IACO,oCAAa,GAAvB,UAAwB,OAA2B,EAAE,EAAO;QACxD,MAAM,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;YACrC,GAAG,EAAE,WAAW,CAAC,OAAO,CAAC,GAAG,IAAI,SAAS,EAAE,kBAAkB,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;SAChF,CAAC,CAAC;IACP,CAAC;IAEL,mBAAC;AAAD,CAhNA,AAgNC,CAhN6C,YAAY,GAgNzD","file":"resource.js","sourceRoot":"","sourcesContent":["import {RequestOptions, RequestOptionsArgs} from \"@angular/http\";\nimport {Observable, Observer} from \"rxjs/Rx\";\nimport {JSON_PROTOCOL, jsonProtocol, Protocol} from \"./protocol\";\nimport {relativeUrl} from \"./options\";\nimport {Rike, RikeTarget} from \"./rike\";\nimport {RikeEvent, RikeEventSource} from \"./event\";\n\n/**\n * An interface of REST-like resources.\n *\n * An operations target is created per resource with a resource instance as target value. All operations on this\n * resource should be performed using this target.\n *\n * This class can be used as a token for resources. It can be registered as Angular service with {{provideResource}}.\n */\nexport abstract class Resource implements RikeEventSource {\n\n    /**\n     * Rike operations target for this resource.\n     *\n     * @return {RikeTarget<any, any>}\n     */\n    abstract readonly rikeTarget: RikeTarget<any, any>;\n\n    get rikeEvents(): Observable<RikeEvent> {\n        return this.rikeTarget.rikeEvents;\n    }\n\n}\n\n/**\n * Abstract implementation of REST-like resource.\n */\nexport abstract class RikeResource extends Resource {\n\n    private _rikeTarget?: RikeTarget<any, any>;\n\n    constructor(private _rike: Rike) {\n        super();\n    }\n\n    /**\n     * Rike interface instance.\n     */\n    get rike(): Rike {\n        return this._rike;\n    }\n\n    /**\n     * Rike operations target for this resource.\n     *\n     * @return {RikeTarget<any, any>} the result of `this.getRikeTarget()` call.\n     */\n    get rikeTarget(): RikeTarget<any, any> {\n        return this.getRikeTarget();\n    }\n\n    /**\n     * Rike operations target for this resource.\n     *\n     * Creates Rike target when needed by calling `createRikeTarget()` method.\n     *\n     * @return {RikeTarget<any, any>}\n     */\n    getRikeTarget(): RikeTarget<any, any> {\n        return this._rikeTarget || (this._rikeTarget = this.createRikeTarget());\n    }\n\n    /**\n     * Creates Rike operation target for this resource.\n     *\n     * This method is called by `getRikeTarget()` method on demand.\n     *\n     * @return {RikeTarget<any, any>} new Rike target.\n     */\n    protected createRikeTarget(): RikeTarget<any, any> {\n        return this.rike.target(this, JSON_PROTOCOL);\n    }\n\n}\n\n/**\n * Loadable resource.\n *\n * It is able to load arbitrary data from the server. By default expects a JSON data. Override `createRikeTarget()`\n * method to change it. When loaded the data will be cached. Call `reload()` method to reload it.\n *\n * @param <T> loaded data type.\n */\nexport abstract class LoadableResource<T> extends RikeResource {\n\n    private _data?: T;\n\n    constructor(rike: Rike) {\n        super(rike);\n    }\n\n    get rikeTarget(): RikeTarget<T, T> {\n        return this.getRikeTarget();\n    }\n\n    getRikeTarget(): RikeTarget<T, T> {\n        return super.getRikeTarget();\n    }\n\n    /**\n     * Loaded data.\n     *\n     * @return {T} `undefined` if data is not loaded yet.\n     */\n    get data(): T | undefined {\n        return this._data;\n    }\n\n    /**\n     * Loads data from server if not loaded yet.\n     *\n     * @return {Observable<T>}\n     */\n    load(): Observable<T> {\n\n        const data = this.data;\n\n        if (data) {\n            return Observable.of<T>(data);\n        }\n\n        return new Observable<T>((observer: Observer<T>) => {\n\n            const subscription = this.rikeTarget\n                .operation(\"load\")\n                .get()\n                .subscribe(\n                    (data: T) => {\n                        this._data = data;\n                        observer.next(data);\n                    },\n                    error => observer.error(error),\n                    () => observer.complete());\n\n            return () => subscription.unsubscribe();\n        });\n    }\n\n    /**\n     * Reloads data from server.\n     */\n    reload(): Observable<T> {\n        this.reset();\n        return this.load();\n    }\n\n    /**\n     * Resets the resource by cleaning cached data.\n     */\n    reset() {\n        this._data = undefined;\n    }\n\n    protected createRikeTarget(): RikeTarget<T, T> {\n        return this.rike.target(this, jsonProtocol<T, T>());\n    }\n\n}\n\n/**\n * CRUD (Create, Load, Update, Delete) resource.\n *\n * It is able to manipulate with server objects. By default it operates over JSON protocol.\n * Override `createRikeTarget()` method to change it.\n */\nexport abstract class CRUDResource<T> extends RikeResource {\n\n    constructor(rike: Rike) {\n        super(rike);\n    }\n\n    get rikeTarget(): RikeTarget<T, T> {\n        return this.getRikeTarget();\n    }\n\n    getRikeTarget(): RikeTarget<T, T> {\n        return super.getRikeTarget();\n    }\n\n    /**\n     * Creates an object on the server.\n     *\n     * Sends `POST` HTTP request. Uses protocol returned from `this.objectCreateProtocol(object)` method.\n     *\n     * @param object an object to create.\n     *\n     * @return {Observable<O>}\n     */\n    create(object: T): Observable<T> {\n        return this.rikeTarget.operation(\"create\", this.objectCreateProtocol(object)).post(object);\n    }\n\n    /**\n     * Reads an object from the server.\n     *\n     * Sends `GET` HTTP request. Uses protocol returned from `this.objectReadProtocol(id)` method call.\n     *\n     * @param id an identifier of object to read.\n     *\n     * @return {Observable<O>}\n     */\n    read(id: any): Observable<T> {\n        return this.rikeTarget.operation(\"read\", this.objectReadProtocol(id)).get();\n    }\n\n    /**\n     * Updates an object on the server.\n     *\n     * Sends `POST` HTTP request. Uses protocol returned from `this.objectUpdateProtocol(object)` method call.\n     *\n     * @param object an object to update.\n     *\n     * @return {Observable<O>}\n     */\n    update(object: T): Observable<T> {\n        return this.rikeTarget.operation(\"update\", this.objectUpdateProtocol(object)).put(object);\n    }\n\n    /**\n     * Deletes an object on the server.\n     *\n     * Sends `DELETE` HTTP request. Uses protocol returned from `this.objectDeleteProtocol(object)` method call.\n     *\n     * @param object an object to delete.\n     *\n     * @return {Observable<any>}\n     */\n    //noinspection ReservedWordAsName\n    delete(object: T): Observable<any> {\n        return this.rikeTarget.operation(\"delete\", this.objectDeleteProtocol(object)).delete();\n    }\n\n    protected createRikeTarget(): RikeTarget<T, T> {\n        return this.rike.target(this, jsonProtocol<T, T>());\n    }\n\n    /**\n     * Constructs object creation protocol.\n     *\n     * @param object an object to create.\n     *\n     * @return {Protocol<T, T>} creation protocol.\n     */\n    protected objectCreateProtocol(object: T): Protocol<any, T> {\n        return this.rikeTarget.protocol.instead().readResponse(response => object);\n    }\n\n    /**\n     * Constructs object read protocol.\n     *\n     * This protocol updates request URL with `objectUrl()` by default.\n     *\n     * @param id an identifier of object to read.\n     *\n     * @return {Protocol<T, T>} read protocol.\n     */\n    protected objectReadProtocol(id: any): Protocol<any, T> {\n        return this.rikeTarget.protocol.prior()\n            .prepareRequest(options => this.objectReadOptions(options, id));\n    }\n\n    /**\n     * Updates object read request options.\n     *\n     * By default returns the result of `objectOptions()` method call.\n     *\n     * This method is used by `objectReadProtocol()` method.\n     *\n     * @param options original request options.\n     * @param id an identifier of object to read.\n     *\n     * @return {RequestOptionsArgs} updated request options.\n     */\n    protected objectReadOptions(options: RequestOptionsArgs, id: any): RequestOptionsArgs {\n        return this.objectOptions(options, id);\n    }\n\n    /**\n     * Constructs object update protocol.\n     *\n     * This protocol detects object identifier with `objectId()` method and updates request URL with `objectUrl()`\n     * by default.\n     *\n     * @param object an object to update.\n     *\n     * @return {Protocol<T, T>} update protocol.\n     */\n    protected objectUpdateProtocol(object: T): Protocol<T, T> {\n        return this.rikeTarget.protocol\n            .prior()\n            .updateRequest((object, options) => this.objectUpdateOptions(options, object))\n            .instead()\n            .readResponse(response => object);\n    }\n\n    //noinspection JSMethodCanBeStatic,JSUnusedLocalSymbols\n    /**\n     * Updates the given object update request options.\n     *\n     * By default returns original options.\n     *\n     * This method is used by `objectUpdateProtocol()` method and can be overridden e.g. to call an\n     * `objectOptions()` method.\n     *\n     * @param options original request options.\n     * @param object object to update.\n     *\n     * @return {RequestOptionsArgs} updated request options.\n     */\n    protected objectUpdateOptions(options: RequestOptionsArgs, object: T): RequestOptionsArgs {\n        return options;\n    }\n\n    /**\n     * Constructs object deletion protocol.\n     *\n     * This protocol detects object identifier with `objectId()` method and updates request URL with `objectUrl()`\n     * by default.\n     *\n     * @param object an object to delete.\n     *\n     * @return {Protocol<T, T>} deletion protocol.\n     */\n    protected objectDeleteProtocol(object: T): Protocol<T, any> {\n        return this.rikeTarget.protocol\n            .prior()\n            .updateRequest((object, options) => this.objectDeleteOptions(options, object))\n            .instead()\n            .readResponse(response => object)\n    }\n\n    /**\n     * Updates object delete request options.\n     *\n     * By default returns the result of `objectOptions()` method call.\n     *\n     * This method is used by `objectDeleteProtocol()` method.\n     *\n     * @param options original request options.\n     * @param object an object to delete.\n     *\n     * @return {RequestOptionsArgs} updated request options.\n     */\n    protected objectDeleteOptions(options: RequestOptionsArgs, object: T): RequestOptionsArgs {\n        return this.objectOptions(options, this.objectId(object));\n    }\n\n    /**\n     * Detects object identifier.\n     *\n     * @param object target object.\n     *\n     * @returns target object's identifier.\n     */\n    protected abstract objectId(object: T): any;\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Updates request options for object with the given identifier.\n     *\n     * By default appends object identifier as URL-encoded string to the base URL.\n     *\n     * @param options original request options.\n     * @param id object identifier.\n     *\n     * @return {RequestOptionsArgs} updated request options.\n     */\n    protected objectOptions(options: RequestOptionsArgs, id: any): RequestOptionsArgs {\n        return new RequestOptions(options).merge({\n            url: relativeUrl(options.url || undefined, encodeURIComponent(id.toString()))\n        });\n    }\n\n}\n"]}