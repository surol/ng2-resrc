{"version":3,"sources":["rike-target.spec.ts"],"names":[],"mappings":"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","file":"rike-target.spec.js","sourceRoot":"","sourcesContent":["import {inject} from \"@angular/core/testing\";\nimport {Response, RequestOptionsArgs, RequestOptions, ResponseOptions} from \"@angular/http\";\nimport {MockBackend, MockConnection} from \"@angular/http/testing\";\nimport {expectJsonProtocol, configureRikeTesting} from \"./rike.spec\";\nimport {Rike, RikeTarget} from \"./rike\";\nimport {jsonProtocol} from \"./protocol\";\n\ndescribe(\"RikeTarget\", () => {\n\n    let rike: Rike;\n    let back: MockBackend;\n    let target: RikeTarget<any, Response>\n\n    beforeEach(() => configureRikeTesting());\n\n    beforeEach(inject([MockBackend, Rike], (_be: MockBackend, _rike: Rike) => {\n        back = _be;\n        rike = _rike;\n        target = rike.target(\"target\");\n    }));\n\n    it(\"created\", () => {\n        expect(target.baseUrl).toBeUndefined();\n    });\n\n    it(\"updated with base url\", () => {\n\n        const t = target.withBaseUrl(\"target-url\");\n\n        expect(t).toBe(target);\n        expect(t.baseUrl).toBe(\"target-url\");\n    });\n\n    it(\"creates operation over the target protocol\", () => {\n\n        const op = target.operation(\"operation1\");\n\n        expect(op.target).toBe(target);\n        expect(op.name).toBe(\"operation1\");\n        expect(op.protocol).toBe(target.protocol);\n    });\n\n    it(\"creates JSON operation\", () => {\n\n        const op = target.json(\"jsonOperation\");\n\n        expect(op.target).toBe(target);\n        expect(op.name).toBe(\"jsonOperation\");\n        expectJsonProtocol(op.protocol);\n    });\n\n    it(\"creates operation over specified protocol\", () => {\n\n        const proto = jsonProtocol<string, string>()\n            .instead()\n            .writeRequest((val: number, opts: RequestOptionsArgs) =>\n                new RequestOptions(opts).merge({body: JSON.stringify(val)}));\n        const op = target.operation(\"customOperation\", proto);\n\n        expect(op.target).toBe(target);\n        expect(op.name).toBe(\"customOperation\");\n        expect(JSON.parse(op.protocol.writeRequest(13, {}).body)).toBe(13);\n    });\n\n    it(\"current operation updated on request\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockRespond(new Response(new ResponseOptions({\n                body: \"response1\",\n            })));\n        });\n\n        const op = target.operation(\"operation\").withUrl(\"/request-url\");\n\n        op.load().subscribe(\n            () => {\n                expect(target.currentOperation).toBe(op, \"Current operation not set on response\");\n            },\n            (err: any) => done.fail(err),\n            () => {\n                expect(target.currentOperation).toBe(op, \"Current operation not set when complete\");\n                setTimeout(() => {\n                    expect(target.currentOperation).toBeUndefined(\"Current operation not cleared\");\n                    done();\n                });\n            })\n    });\n\n    it(\"current operation updated on error\", done => {\n        back.connections.subscribe((connection: MockConnection) => {\n            connection.mockError(new Error(\"error1\"));\n        });\n\n        const op = target.operation(\"operation\").withUrl(\"/request-url\");\n\n        op.load().subscribe(\n            () => {\n                done.fail(\"Response received\");\n            },\n            () => {\n                expect(target.currentOperation).toBe(op, \"Current operation not set on error\");\n                setTimeout(() => {\n                    expect(target.currentOperation).toBeUndefined(\"Current operation not cleared\");\n                    done();\n                });\n            });\n    });\n});\n"]}