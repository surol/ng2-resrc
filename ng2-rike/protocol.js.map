{"version":3,"file":"protocol.js","sourceRoot":"","sources":["protocol.ts"],"names":[],"mappings":";;;;;OAAO,EAA+B,cAAc,EAAE,OAAO,EAAC,MAAM,eAAe;AA0BnF;;;;;;;;GAQG;AACH;IAAA;IAqFA,CAAC;IAnFG,kCAAkC;IAClC;;;;;;;;;;;;OAYG;IACH,iCAAc,GAAd,UAAe,OAA2B;QACtC,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IA0BD,kCAAkC;IAClC;;;;;;;;OAQG;IACH,8BAAW,GAAX,UAAY,KAAoB;QAC5B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACH,wBAAK,GAAL;QACI,MAAM,CAAC,IAAI,iBAAiB,CAAU,IAAI,CAAC,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACH,uBAAI,GAAJ;QACI,MAAM,CAAC,IAAI,kBAAkB,CAAU,IAAI,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACH,0BAAO,GAAP;QACI,MAAM,CAAC,IAAI,iBAAiB,CAAU,IAAI,CAAC,CAAC;IAChD,CAAC;IAEL,eAAC;AAAD,CAAC,AArFD,IAqFC;AAqFD;IAEI,6BAAsB,SAA4B,EAAU,MAAe;QAArD,cAAS,GAAT,SAAS,CAAmB;QAAU,WAAM,GAAN,MAAM,CAAS;IAC3E,CAAC;IAED,4CAAc,GAAd,UAAe,OAA4D;QAA3E,iBAQC;QAPG,MAAM,CAAC,IAAI,cAAc,CACrB,IAAI,CAAC,MAAM;cACL,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAA/C,CAA+C;cAC1D,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,EAA/C,CAA+C,EAChE,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,EAA7C,CAA6C,EACnE,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,EAArC,CAAqC,EACjD,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAjC,CAAiC,CAAC,CAAC;IACpD,CAAC;IAED,2CAAa,GAAb,UAAc,MAAwE;QAAtF,iBAQC;QAPG,MAAM,CAAC,IAAI,cAAc,CACrB,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,EAAtC,CAAsC,EACjD,IAAI,CAAC,MAAM;cACL,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,EAA9D,CAA8D;cACpF,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,MAAM,CAAC,OAAO,EAAE,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,EAA9D,CAA8D,EAC1F,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,EAArC,CAAqC,EACjD,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAjC,CAAiC,CAAC,CAAC;IACpD,CAAC;IAED,yCAAW,GAAX,UAAY,MAA+C;QAA3D,iBAQC;QAPG,MAAM,CAAC,IAAI,cAAc,CACrB,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,EAAtC,CAAsC,EACjD,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,EAA7C,CAA6C,EACnE,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,EAArC,CAAqC,EACjD,IAAI,CAAC,MAAM;cACL,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAzC,CAAyC;cAClD,UAAA,KAAK,IAAI,OAAA,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAzC,CAAyC,CAAC,CAAC;IAClE,CAAC;IAED,mCAAK,GAAL,UAAM,QAA4B;QAAlC,iBAcC;QAbG,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,cAAc,CACrB,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,EAA/D,CAA+D,EAC1E,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,EAA7C,CAA6C,EACnE,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,EAArC,CAAqC,EACjD,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAvD,CAAuD,CAAC,CAAC;QAC1E,CAAC;QAED,MAAM,CAAC,IAAI,cAAc,CACrB,UAAA,OAAO,IAAI,OAAA,QAAQ,CAAC,cAAc,CAAC,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,EAA/D,CAA+D,EAC1E,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,EAA7C,CAA6C,EACnE,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,EAArC,CAAqC,EACjD,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,WAAW,CAAC,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAvD,CAAuD,CAAC,CAAC;IAC1E,CAAC;IAEL,0BAAC;AAAD,CAAC,AAnDD,IAmDC;AAED;IAAyC,qCAA4B;IAEjE,2BAAY,QAA2B;QACnC,kBAAM,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED,iCAAK,GAAL,UAAS,OAA2B;QAApC,iBAMC;QALG,MAAM,CAAC,IAAI,cAAc,CACrB,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,EAAtC,CAAsC,EACjD,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,EAAtD,CAAsD,EAC5E,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,EAArC,CAAqC,EACjD,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAjC,CAAiC,CAAC,CAAC;IACpD,CAAC;IAEL,wBAAC;AAAD,CAAC,AAdD,CAAyC,mBAAmB,GAc3D;AAED;IAA0C,sCAA4B;IAElE,4BAAY,QAA2B;QACnC,kBAAM,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,mCAAM,GAAN,UAAU,OAAqD;QAA/D,iBAMC;QALG,MAAM,CAAC,IAAI,cAAc,CACrB,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,EAAtC,CAAsC,EACjD,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,EAA7C,CAA6C,EACnE,UAAA,YAAY,IAAI,OAAA,OAAO,CAAC,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,YAAY,CAAC,EAAhE,CAAgE,EAChF,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAA7D,CAA6D,CAAC,CAAC;IAChF,CAAC;IAEL,yBAAC;AAAD,CAAC,AAdD,CAA0C,mBAAmB,GAc5D;AA8CD;IAEI,2BAAoB,SAA4B;QAA5B,cAAS,GAAT,SAAS,CAAmB;IAChD,CAAC;IAED,0CAAc,GAAd,UAAe,OAA4D;QAA3E,iBAMC;QALG,MAAM,CAAC,IAAI,cAAc,CACrB,OAAO,EACP,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,EAA7C,CAA6C,EACnE,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,EAArC,CAAqC,EACjD,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAjC,CAAiC,CAAC,CAAC;IACpD,CAAC;IAED,wCAAY,GAAZ,UAAgB,KAAsE;QAAtF,iBAMC;QALG,MAAM,CAAC,IAAI,cAAc,CACrB,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,EAAtC,CAAsC,EACjD,KAAK,EACL,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,EAArC,CAAqC,EACjD,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAjC,CAAiC,CAAC,CAAC;IACpD,CAAC;IAED,wCAAY,GAAZ,UAAgB,IAA+B;QAA/C,iBAMC;QALG,MAAM,CAAC,IAAI,cAAc,CACrB,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,EAAtC,CAAsC,EACjD,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,EAA7C,CAA6C,EACnE,IAAI,EACJ,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAjC,CAAiC,CAAC,CAAC;IACpD,CAAC;IAED,uCAAW,GAAX,UAAY,MAA+C;QAA3D,iBAMC;QALG,MAAM,CAAC,IAAI,cAAc,CACrB,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,EAAtC,CAAsC,EACjD,UAAC,OAAO,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,EAA7C,CAA6C,EACnE,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,EAArC,CAAqC,EACjD,MAAM,CAAC,CAAC;IAChB,CAAC;IAEL,wBAAC;AAAD,CAAC,AArCD,IAqCC;AAED;IAAsC,kCAAiB;IAEnD,wBACY,eAAoE,EACpE,aAA+E,EAC/E,aAA0C,EAC1C,YAAqD;QAC7D,iBAAO,CAAC;QAJA,oBAAe,GAAf,eAAe,CAAqD;QACpE,kBAAa,GAAb,aAAa,CAAkE;QAC/E,kBAAa,GAAb,aAAa,CAA6B;QAC1C,iBAAY,GAAZ,YAAY,CAAyC;IAEjE,CAAC;IAED,uCAAc,GAAd,UAAe,OAA2B;QACtC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,qCAAY,GAAZ,UAAa,OAAW,EAAE,OAA2B;QACjD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAChD,CAAC;IAED,qCAAY,GAAZ,UAAa,QAAkB;QAC3B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,oCAAW,GAAX,UAAY,KAAoB;QAC5B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAEL,qBAAC;AAAD,CAAC,AA1BD,CAAsC,QAAQ,GA0B7C;AAED;IAAoC,gCAAiB;IAArD;QAAoC,8BAAiB;IAsBrD,CAAC;IApBG,mCAAY,GAAZ,UAAa,OAAW,EAAE,OAA2B;QAEjD,IAAM,IAAI,GAAG,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAC,CAAC,CAAC;QAEhF,IAAI,OAAgB,CAAC;QAErB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,OAAO,GAAG,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC3C,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAEhD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,mCAAY,GAAZ,UAAa,QAAkB;QAC3B,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IAEL,mBAAC;AAAD,CAAC,AAtBD,CAAoC,QAAQ,GAsB3C;AAED;;;;;;GAMG;AACH,OAAO,IAAM,aAAa,GAAuB,IAAI,YAAY,EAAY,CAAC;AAE9E;;;;GAIG;AACH,OAAO,IAAM,YAAY,GAAuC,cAAM,OAAA,aAAa,EAAb,CAAa,CAAC;AAEpF;IAA2B,gCAAuB;IAAlD;QAA2B,8BAAuB;IAUlD,CAAC;IARG,mCAAY,GAAZ,UAAa,OAAY,EAAE,OAA2B;QAClD,MAAM,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;IAC9D,CAAC;IAED,mCAAY,GAAZ,UAAa,QAAkB;QAC3B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAEL,mBAAC;AAAD,CAAC,AAVD,CAA2B,QAAQ,GAUlC;AAED;;;;;;GAMG;AACH,OAAO,IAAM,aAAa,GAA4B,IAAI,YAAY,EAAE,CAAC","sourcesContent":["import {Response, RequestOptionsArgs, RequestOptions, Headers} from \"@angular/http\";\nimport {ProtocolAddon} from \"./protocol\";\n\n/**\n * Error response.\n *\n * All error handlers operates over it.\n *\n * Typical error handler extends this interface with handler-specific fields and fills them.\n */\nexport interface ErrorResponse {\n\n    /**\n     * HTTP response.\n     */\n    response: Response;\n\n    /**\n     * Arbitrary error object.\n     *\n     * This field is filled when HTTP returns something different from `Response` object.\n     */\n    error?: any;\n\n}\n\n/**\n * REST-like operations protocol.\n *\n * It is used by REST-like operations to encode operation requests to HTTP, decode operation responses from HTTP,\n * and handle errors.\n *\n * `IN` is operation request type.\n * `OUT` is operation response type.\n */\nexport abstract class Protocol<IN, OUT> {\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Prepares HTTP request.\n     *\n     * The `options` passed have at least `url` and `method` fields set.\n     *\n     * This method is called for each HTTP request before _writeRequest_ method. When default protocol is set for\n     * operation target, this method is called first on the default protocol, and then - on the operation protocol.\n     *\n     * @param options original HTTP request options.\n     *\n     * @returns modified HTTP request options to use further instead of original ones. Returns unmodified request\n     * `options` by default.\n     */\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return options;\n    }\n\n    /**\n     * Writes operation request as HTTP request.\n     *\n     * This method is invoked only for HTTP request methods that expect request body.\n     *\n     * The `options` are the result of `prepareRequest` method invocation. It is expected the result options to\n     * contain a `body` field set.\n     *\n     * @param request operation request to encode\n     * @param options original HTTP request options.\n     *\n     * @return modified HTTP request options that will be used to perform actual request.\n     */\n    abstract writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs;\n\n    /**\n     * Reads operation response from HTTP response.\n     *\n     * @param response HTTP response.\n     *\n     * @returns operation response.\n     */\n    abstract readResponse(response: Response): OUT;\n\n    //noinspection JSMethodCanBeStatic\n    /**\n     * Handles HTTP error.\n     *\n     * Does not modify error response by default.\n     *\n     * @param error error response to handle.\n     *\n     * @returns error processing result.\n     */\n    handleError(error: ErrorResponse): ErrorResponse {\n        return error;\n    }\n\n    /**\n     * Creates protocol addon able to prepend protocol actions with specified functions.\n     *\n     * @return {ProtocolPre<IN, OUT>} protocol addon.\n     */\n    prior(): ProtocolPre<IN, OUT> {\n        return new CustomProtocolPre<IN, OUT>(this);\n    }\n\n    /**\n     * Creates protocol addon able to append specified functions to protocol actions.\n     *\n     * @return {ProtocolPost<IN, OUT>} protocol addon.\n     */\n    then(): ProtocolPost<IN, OUT> {\n        return new CustomProtocolPost<IN, OUT>(this);\n    }\n\n    /**\n     * Creates protocol modifier able to replace protocol actions with specified functions.\n     *\n     * @return {ProtocolMod<IN, OUT>} protocol modifier.\n     */\n    instead(): ProtocolMod<IN, OUT> {\n        return new CustomProtocolMod<IN, OUT>(this);\n    }\n\n}\n\n/**\n * Protocol addon. It is able to construct new protocol based on original one by adding specified actions to original\n * ones.\n */\nexport interface ProtocolAddon<IN, OUT> {\n\n    /**\n     * Constructs new protocol based on this one, which prepares requests with the given function.\n     *\n     * @param prepare a request preparation function invoked in addition to `Protocol.prepareRequest` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which updates request options with the given function.\n     * The request will be written with original `Protocol.writeRequest()` method.\n     *\n     * @param update a function updating request options in addition to `Protocol.writeRequest()` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    updateRequest(update: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which handles errors with the given function.\n     *\n     * @param handle a function handling errors in addition to `Protocol.handleError()` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    handleError(handle: (error: ErrorResponse) => ErrorResponse): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which prepares requests and handles errors with corresponding\n     * `protocol` methods in addition to original ones.\n     *\n     * @param protocol a protocol to apply.\n     *\n     * @return protocol {Protocol<IN, OUT>} new protocol.\n     */\n    apply(protocol: Protocol<any, any>): Protocol<IN, OUT>;\n\n}\n\n/**\n * Protocol addon used to construct a new protocol based on original one by adding specified actions prior to original\n * ones.\n */\nexport interface ProtocolPre<IN, OUT> extends ProtocolAddon<IN, OUT> {\n\n    /**\n     * Constructs new protocol based on original one, which builds requests for target protocol based on requests\n     * of another type.\n     *\n     * @param <I> new operation request type.\n     * @param convert a request converter function.\n     *\n     * @return protocol {Protocol<I, OUT>} new protocol.\n     */\n    input<I>(convert: (request: I) => IN): Protocol<I, OUT>;\n\n}\n\n/**\n * Protocol addon used to construct a new protocol based on original one by adding specified actions after the original\n * ones.\n */\nexport interface ProtocolPost<IN, OUT> extends ProtocolAddon<IN, OUT> {\n\n    /**\n     * Constructs new protocol based on original one, which converts original responses to responses of another type.\n     *\n     * @param <O> new operation response type.\n     * @param convert a response converter function.\n     *\n     * @return protocol {Protocol<IN, O>} new protocol.\n     */\n    output<O>(convert: (response: OUT, httpResponse: Response) => O): Protocol<IN, O>;\n\n}\n\nclass CustomProtocolAddon<IN, OUT> implements ProtocolAddon<IN, OUT> {\n\n    constructor(protected _protocol: Protocol<IN, OUT>, private _prior: boolean) {\n    }\n\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            this._prior\n                ? options => this._protocol.prepareRequest(prepare(options))\n                : options => prepare(this._protocol.prepareRequest(options)),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            error => this._protocol.handleError(error));\n    }\n\n    updateRequest(update: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            options => this._protocol.prepareRequest(options),\n            this._prior\n                ? (request, options) => this._protocol.writeRequest(request, update(request, options))\n                : (request, options) => update(request, this._protocol.writeRequest(request, options)),\n            response => this._protocol.readResponse(response),\n            error => this._protocol.handleError(error));\n    }\n\n    handleError(handle: (error: ErrorResponse) => ErrorResponse): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            this._prior\n                ? error => this._protocol.handleError(handle(error))\n                : error => handle(this._protocol.handleError(error)));\n    }\n\n    apply(protocol: Protocol<any, any>): Protocol<IN, OUT> {\n        if (this._prior) {\n            return new CustomProtocol<IN, OUT>(\n                options => this._protocol.prepareRequest(protocol.prepareRequest(options)),\n                (request, options) => this._protocol.writeRequest(request, options),\n                response => this._protocol.readResponse(response),\n                error => this._protocol.handleError(protocol.handleError(error)));\n        }\n\n        return new CustomProtocol<IN, OUT>(\n            options => protocol.prepareRequest(this._protocol.prepareRequest(options)),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            error => protocol.handleError(this._protocol.handleError(error)));\n    }\n\n}\n\nclass CustomProtocolPre<IN, OUT> extends CustomProtocolAddon<IN, OUT> implements ProtocolPre<IN, OUT> {\n\n    constructor(protocol: Protocol<IN, OUT>) {\n        super(protocol, true);\n    }\n\n    input<I>(convert: (request: I) => IN): Protocol<I, OUT> {\n        return new CustomProtocol<I, OUT>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(convert(request), options),\n            response => this._protocol.readResponse(response),\n            error => this._protocol.handleError(error));\n    }\n\n}\n\nclass CustomProtocolPost<IN, OUT> extends CustomProtocolAddon<IN, OUT> implements ProtocolPost<IN, OUT> {\n\n    constructor(protocol: Protocol<IN, OUT>) {\n        super(protocol, false);\n    }\n\n    output<O>(convert: (response: OUT, httpResponse: Response) => O): Protocol<IN, O> {\n        return new CustomProtocol<IN, O>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            httpResponse => convert(this._protocol.readResponse(httpResponse), httpResponse),\n            error => this._protocol.handleError(this._protocol.handleError(error)));\n    }\n\n}\n\n/**\n * Protocol modifier. It is able to construct new protocol based on original one by replacing protocol actions with\n * specified ones.\n */\nexport interface ProtocolMod<IN, OUT> {\n\n    /**\n     * Constructs new protocol based on original one, which prepares the request with the given function.\n     *\n     * @param prepare a request preparation function invoked instead of `Protocol.prepareRequest` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which writes the request with the given function.\n     *\n     * @param write new request writer function.\n     *\n     * @return {Protocol<I, OUT>} new protocol.\n     */\n    writeRequest<I>(write: (request: I, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<I, OUT>;\n\n    /**\n     * Constructs new protocol based on original one, which reads responses with the given function.\n     *\n     * @param read new response reader function.\n     *\n     * @return {Protocol<IN, O>} new protocol.\n     */\n    readResponse<O>(read: (response: Response) => O): Protocol<IN, O>;\n\n    /**\n     * Constructs new protocol based on original one, which handles errors with the given function.\n     *\n     * @param handle a function handling errors instead of `Protocol.handleError()` method.\n     *\n     * @return {Protocol<IN, OUT>} new protocol.\n     */\n    handleError(handle: (error: ErrorResponse) => ErrorResponse): Protocol<IN, OUT>;\n\n}\n\nclass CustomProtocolMod<IN, OUT> implements ProtocolMod<IN, OUT> {\n\n    constructor(private _protocol: Protocol<IN, OUT>) {\n    }\n\n    prepareRequest(prepare: (options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            prepare,\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            error => this._protocol.handleError(error));\n    }\n\n    writeRequest<I>(write: (request: I, options: RequestOptionsArgs) => RequestOptionsArgs): Protocol<I, OUT> {\n        return new CustomProtocol<I, OUT>(\n            options => this._protocol.prepareRequest(options),\n            write,\n            response => this._protocol.readResponse(response),\n            error => this._protocol.handleError(error));\n    }\n\n    readResponse<O>(read: (response: Response) => O): Protocol<IN, O> {\n        return new CustomProtocol<IN, O>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            read,\n            error => this._protocol.handleError(error));\n    }\n\n    handleError(handle: (error: ErrorResponse) => ErrorResponse): Protocol<IN, OUT> {\n        return new CustomProtocol<IN, OUT>(\n            options => this._protocol.prepareRequest(options),\n            (request, options) => this._protocol.writeRequest(request, options),\n            response => this._protocol.readResponse(response),\n            handle);\n    }\n\n}\n\nclass CustomProtocol<IN, OUT> extends Protocol<IN, OUT> {\n\n    constructor(\n        private _prepareRequest: (options: RequestOptionsArgs) => RequestOptionsArgs,\n        private _writeRequest: (request: IN, options: RequestOptionsArgs) => RequestOptionsArgs,\n        private _readResponse: (response: Response) => OUT,\n        private _handleError: (error: ErrorResponse) => ErrorResponse) {\n        super();\n    }\n\n    prepareRequest(options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._prepareRequest(options);\n    }\n\n    writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n        return this._writeRequest(request, options);\n    }\n\n    readResponse(response: Response): OUT {\n        return this._readResponse(response);\n    }\n\n    handleError(error: ErrorResponse): ErrorResponse {\n        return this._handleError(error);\n    }\n\n}\n\nclass JsonProtocol<IN, OUT> extends Protocol<IN, OUT> {\n\n    writeRequest(request: IN, options: RequestOptionsArgs): RequestOptionsArgs {\n\n        const opts = new RequestOptions(options).merge({body: JSON.stringify(request)});\n\n        let headers: Headers;\n\n        if (opts.headers) {\n            headers = opts.headers;\n        } else {\n            opts.headers = headers = new Headers();\n        }\n        headers.set(\"Content-Type\", \"application/json\");\n\n        return opts;\n    }\n\n    readResponse(response: Response): OUT {\n        return response.json();\n    }\n\n}\n\n/**\n * JSON protocol.\n *\n * Sends and receives arbitrary data as JSON over HTTP.\n *\n * @type {Protocol<any>}\n */\nexport const JSON_PROTOCOL: Protocol<any, any> = new JsonProtocol<any, any>();\n\n/**\n * Returns JSON protocol.\n *\n * Sends and receives the data of the given type as JSON over HTTP.\n */\nexport const jsonProtocol: (<IN, OUT>() => Protocol<IN, OUT>) = () => JSON_PROTOCOL;\n\nclass HttpProtocol extends Protocol<any, Response> {\n\n    writeRequest(request: any, options: RequestOptionsArgs): RequestOptionsArgs {\n        return new RequestOptions(options).merge({body: request});\n    }\n\n    readResponse(response: Response): Response {\n        return response;\n    }\n\n}\n\n/**\n * HTTP protocol.\n *\n * The request type is any. It is used as request body.\n *\n * @type {Protocol<any, Response>}\n */\nexport const HTTP_PROTOCOL: Protocol<any, Response> = new HttpProtocol();\n"]}